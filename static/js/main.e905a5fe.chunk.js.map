{"version":3,"sources":["config/index.js","components/NavBar/index.js","components/CreateProjectForm/index.js","components/source-props/fragments.js","components/IsCompleted/index.js","components/Todo/index.js","components/CreateTodoForm/index.js","components/source-props/todo.js","components/Todos/index.js","components/Project/index.js","components/source-props/project.js","components/Projects/index.js","App.js","serviceWorker.js","client/index.js","index.js"],"names":["UPDATE_TODO_ACTION_ID","UPDATE_PROJECT_ACTION_ID","CREATE_TODO_FOR_PROJECT_ACTION_ID","UPDATE_ISCOMPLETED_ACTION_ID","CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID","CREATE_PROJECT_FOR_USER_ACTION_ID","SOURCE_TODOSOURCE_ID","Wrapper","styled","div","NavBar","Form","Button","button","compose","withNoStack","graphql","EXECUTE_ACTION","name","createProject","currentUser","onAdd","useState","projectValue","updateProjectValue","loading","updateLoading","handleSubmit","e","a","preventDefault","variables","actionId","executionParameters","JSON","stringify","parentInstanceId","id","value","unrestricted","update","htmlFor","type","onChange","target","onKeyPress","charCode","disabled","onClick","PROJECT_FRAGMENT","gql","TODO_FRAGMENT","IS_COMPLETED_FRAGMENT","IsCompletedStyleWrapper","span","isCompleted","label","updateInstance","onUpdate","instanceId","optimisticResponse","ExecuteAction","checked","TodoStyleWrapper","props","hoverColor","todo","todoValue","updateTodoValue","isEditMode","updateIsEditMode","isSaving","updateIsSaving","projectId","createTodo","createIsCompleted","createTodoResponse","newTodoData","parse","data","cache","response","isCompletedData","newTodo","instance","__typename","children","TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY","TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS","TodoListStyleWrapper","Todos","parameters","currentProjectId","query","typeRelationships","error","updateSourceAfterCreateAction","updateSourceAfterUpdateAction","graphQLErrors","todos","sourceData","map","el","key","ProjectStyleWrapper","Row","project","PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY","PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS","ProjectsStyleWrapper","Projects","console","log","projects","CreateProjectForm","LoginWrapper","App","className","Boolean","window","location","hostname","match","authLink","createAuthLink","link","ApolloLink","from","httpLink","ApolloClient","InMemoryCache","dataIdFromObject","object","ReactDOM","render","client","platformId","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAOaA,EAAsB,uCACtBC,EAAyB,uCACzBC,EAAkC,uCAClCC,EAA6B,uCAC7BC,EAAsC,uCACtCC,EAAkC,uCAGlCC,EAAqB,gF,mSCVlC,IAAMC,EAAUC,IAAOC,IAAV,KAqBEC,EATA,kBACb,kBAACH,EAAD,KACE,8CACA,6BACE,kBAAC,IAAD,S,sUCbN,IAAMI,EAAOH,IAAOC,IAAV,KAQJG,EAASJ,IAAOK,OAAV,KAmEGC,UAAQC,IAAaC,YAAQC,IAAgB,CAAEC,KAAM,kBAArDJ,CA/Df,YAA6D,IAAtCK,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,MAAS,EACbC,mBAAS,IADI,mBAClDC,EADkD,KACpCC,EADoC,OAEvBF,oBAAS,GAFc,mBAElDG,EAFkD,KAEzCC,EAFyC,cAQ3CC,EAR2C,6EAQ1D,WAA4BC,GAA5B,SAAAC,EAAA,wDACED,EAAEE,iBAEGP,EAHP,wDAOEG,GAAc,GAPhB,SASQP,EAAc,CAClBY,UAAW,CACTC,SAAU3B,EACV4B,oBAAqBC,KAAKC,UAAU,CAClCC,iBAAkBhB,EAAYiB,GAC9BC,MAAOf,IAETgB,cAAc,GAEhBC,OAAQnB,MAlBZ,OAqBEG,EAAmB,IACnBE,GAAc,GAtBhB,0CAR0D,sBAuC1D,OACE,kBAACf,EAAD,KACE,2BAAO8B,QAAQ,gBAAf,gBAEE,2BACEJ,GAAG,eACHK,KAAK,OACLC,SA1CR,SAAsBf,GACpBJ,EAAmBI,EAAEgB,OAAON,QA0CtBO,WAdR,SAAwBjB,GACH,KAAfA,EAAEkB,UACJnB,EAAaC,IAaTU,MAAOf,EACPwB,SAAUtB,KAGd,kBAACb,EAAD,CAAQ8B,KAAK,SAASK,SAAUtB,EAASuB,QAASrB,GAE9CF,EACI,sBACA,qB,oaC1EP,IAAMwB,EAAmBC,IAAH,KAOhBC,EAAgBD,IAAH,KAObE,EAAwBF,IAAH,K,iLCRlC,IAAMG,EAA0B7C,IAAO8C,KAAV,KA8CdtC,kBAAQC,IAAgB,CAAEC,KAAM,kBAAhCF,CAvCf,YAA0F,IAAnEuC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,eAAgBC,EAA8B,EAA9BA,SAA8B,IAApBX,gBAAoB,oDACvF,4BAAAlB,EAAA,4DACQS,EAA8B,SAAtBiB,EAAYjB,MAAmB,QAAU,OADzD,SAGQmB,EAAe,CACnB1B,UAAW,CACTC,SAAU7B,EACV8B,oBAAqBC,KAAKC,UAAU,CAClCG,QACAqB,WAAYJ,EAAYlB,KAE1BE,cAAc,GAEhBqB,mBAAoB,CAClBC,cAAe3B,KAAKC,UAAU,CAC5BE,GAAIkB,EAAYlB,GAChBC,WAGJE,OAAQkB,EAASH,EAAYlB,GAAIe,KAlBrC,0CADuF,sBAuBvF,OACE,kBAACC,EAAD,KACE,2BAAOZ,QAASc,EAAYlB,IACzBmB,EACD,2BACEnB,GAAIkB,EAAYlB,GAChBK,KAAK,WACLoB,QAA+B,SAAtBP,EAAYjB,MACrBK,SA/B+E,2CAgC/EI,SAAUA,Q,2bCrCpB,IAAMgB,EAAmBvD,IAAOC,IAAV,KAQhBG,EAASJ,IAAOK,OAAV,IAUC,SAAAmD,GAAK,OAAIA,EAAMC,YAAc,YAqF3BjD,kBAAQC,IAAgB,CAAEC,KAAM,kBAAhCF,CAjFf,YAAgE,IAAhDkD,EAA+C,EAA/CA,KAAMX,EAAyC,EAAzCA,YAAaE,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,SAAY,EACtBpC,mBAAS4C,EAAK5B,OADQ,mBACrD6B,EADqD,KAC1CC,EAD0C,OAEpB9C,oBAAS,GAFW,mBAErD+C,EAFqD,KAEzCC,EAFyC,OAGxBhD,oBAAS,GAHe,mBAGrDiD,EAHqD,KAG3CC,EAH2C,gDAS7D,sBAAA3C,EAAA,4DACE2C,GAAe,GADjB,SAGQf,EAAe,CACnB1B,UAAW,CACTC,SAAUhC,EACViC,oBAAqBC,KAAKC,UAAU,CAClCG,MAAO6B,EACPR,WAAYO,EAAK7B,KAEnBG,OAAQkB,EAASQ,EAAK7B,GAAIc,MAVhC,OAcEmB,GAAiB,GACjBE,GAAe,GAfjB,0CAT6D,sBA2B7D,OACE,kBAACT,EAAD,KACGM,EAEG,oCACE,2BAAO5B,QAASyB,EAAK7B,IAArB,cAEE,2BACEA,GAAI6B,EAAK7B,GACTK,KAAK,OACLJ,MAAO6B,EACPxB,SAjCd,SAA+Bf,GAC7BwC,EAAgBxC,EAAEgB,OAAON,QAiCbS,SAAUwB,KAGd,kBAAC,EAAD,CACE7B,KAAK,SACLuB,WAAW,UACXjB,QA7CiD,2CA8CjDD,SAAUwB,GAJZ,UAQA,kBAAC,EAAD,CACE7B,KAAK,SACLuB,WAAW,UACXjB,QAAS,kBAAMsB,GAAiB,IAChCvB,SAAUwB,GAJZ,WAWF,oCACGJ,EACD,kBAAC,EAAD,CACEzB,KAAK,SACLM,QAAS,kBAAMsB,GAAiB,KAFlC,UAMA,kBAAC,EAAD,CACEf,YAAaA,EACbC,MAAM,QACNE,SAAUA,Q,4QC/FxB,IAAM/C,EAAOH,IAAOC,IAAV,KAQJG,EAASJ,IAAOK,OAAV,KAuGGC,UACbE,YAAQC,IAAgB,CAAEC,KAAM,eAChCF,YAAQC,IAAgB,CAAEC,KAAM,sBAFnBJ,CAnGf,YAA8E,IAApD2D,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,kBAAmBtD,EAAS,EAATA,MAAS,EACpCC,mBAAS,IAD2B,mBACnE6C,EADmE,KACxDC,EADwD,OAExC9C,oBAAS,GAF+B,mBAEnEG,EAFmE,KAE1DC,EAF0D,cAQ5DC,EAR4D,6EAQ3E,WAA4BC,GAA5B,iBAAAC,EAAA,wDACED,EAAEE,iBAEGqC,EAHP,wDAOEzC,GAAc,GAPhB,SASmCgD,EAAW,CAC1C3C,UAAW,CACTC,SAAU9B,EACV+B,oBAAqBC,KAAKC,UAAU,CAClCC,iBAAkBqC,EAClBnC,MAAO6B,IAET5B,cAAc,KAhBpB,cASQqC,EATR,OAoBQC,EAAc3C,KAAK4C,MAAMF,EAAmBG,KAAKlB,eApBzD,UAsBQc,EAAkB,CACtB5C,UAAW,CACTC,SAAU5B,EACV6B,oBAAqBC,KAAKC,UAAU,CAClCC,iBAAkByC,EAAYlB,WAC9BrB,MAAO,UAETC,cAAc,GAEhBC,OAAQ,SAACwC,EAAOC,GACd,IAAMC,EAAkBhD,KAAK4C,MAAMG,EAASF,KAAKlB,eAE3CsB,EAAU,CACdC,SAAU,CACR/C,GAAIwC,EAAYlB,WAChBrB,MAAOuC,EAAYvC,MACnB+C,WAAY,YAEdC,SAAU,CACR,CACEF,SAAU,CACR/C,GAAI6C,EAAgBvB,WACpBrB,MAAO4C,EAAgB5C,MACvB+C,WAAY,YAEdA,WAAY,yBAGhBA,WAAY,wBAGdhE,EAAM8D,EAAN9D,CAAe2D,MArDrB,QAyDEZ,EAAgB,IAChB1C,GAAc,GA1DhB,2CAR2E,sBA2E3E,OACE,kBAAC,EAAD,KACE,2BAAOe,QAAQ,aAAf,cAEE,2BACEJ,GAAG,YACHK,KAAK,OACLC,SA9ER,SAAsBf,GACpBwC,EAAgBxC,EAAEgB,OAAON,QA8EnBO,WAdR,SAAwBjB,GACH,KAAfA,EAAEkB,UACJnB,EAAaC,IAaTU,MAAO6B,EACPpB,SAAUtB,KAGd,kBAAC,EAAD,CAAQiB,KAAK,SAASK,SAAUtB,EAASuB,QAASrB,GAE9CF,EACI,iBACA,e,0cC5GP,IAAM8D,GAAyCrC,IAAH,KAsB/CC,EACAC,GAGSoC,GAAuC,ePT1B,2HOS0B,ePXnB,kIOaN,O,8WCvB3B,IAAMC,GAAuBjF,IAAOC,IAAV,MAmDXiF,OA7Cf,YAA+B,IAAdjB,EAAa,EAAbA,UACTkB,EAAa,CACjBC,iBAAkBnB,GAGpB,OACE,kBAAC,IAAD,CACEpC,GAAI/B,EACJuF,MAAON,GACPO,kBAAmBN,GACnBG,WAAYA,GAEX,YAA2F,IAAzFlE,EAAwF,EAAxFA,QAASsE,EAA+E,EAA/EA,MAAOhB,EAAwE,EAAxEA,KAAMiB,EAAkE,EAAlEA,8BAA+BC,EAAmC,EAAnCA,8BACtD,GAAIxE,EAAS,MAAO,aAEpB,GAAIsE,EAAO,MAAM,UAAN,OAAiBA,EAAMG,eAElC,IAAMC,EAAQpB,EAAKqB,WAAWC,IAAI,SAAAC,GAAE,O,uVAAA,IAC/BA,EAAGlB,SAD4B,CAElC7B,YAAa+C,EAAGhB,SAAS,GAAGF,aAG9B,OACE,oCACE,kBAAC,EAAD,CAAgBX,UAAWA,EAAWpD,MAAO2E,IAC7C,kBAACP,GAAD,KAEIU,GAASA,EAAME,IAAI,SAAAnC,GAAI,OACrB,kBAAC,EAAD,CACEqC,IAAKrC,EAAK7B,GACV6B,KAAMA,EACNX,YAAaW,EAAKX,YAClBG,SAAUuC,W,0hBCtC9B,IAAMO,GAAsBhG,IAAOC,IAAV,MAQnBgG,GAAMjG,IAAOC,IAAV,MAIHG,GAASJ,IAAOK,OAAV,KAUC,SAAAmD,GAAK,OAAIA,EAAMC,YAAc,YAiF3BjD,mBAAQC,IAAgB,CAAEC,KAAM,kBAAhCF,CA7Ef,YAAyD,IAAtC0F,EAAqC,EAArCA,QAASjD,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,SAAY,EACTpC,mBAASoF,EAAQpE,OADR,mBAC9Cf,EAD8C,KAChCC,EADgC,OAEbF,oBAAS,GAFI,mBAE9C+C,EAF8C,KAElCC,EAFkC,OAGjBhD,oBAAS,GAHQ,mBAG9CiD,EAH8C,KAGpCC,EAHoC,gDAStD,sBAAA3C,EAAA,4DACE2C,GAAe,GADjB,SAGQf,EAAe,CACnB1B,UAAW,CACTC,SAAU/B,EACVgC,oBAAqBC,KAAKC,UAAU,CAClCG,MAAOf,EACPoC,WAAY+C,EAAQrE,MAGxBG,OAAQkB,EAASgD,EAAQrE,GAAIY,KAXjC,OAcEqB,GAAiB,GACjBE,GAAe,GAfjB,0CATsD,sBA2BtD,OACE,kBAACgC,GAAD,KACGnC,EAEG,kBAACoC,GAAD,KACE,2BAAOhE,QAASiE,EAAQrE,IAAxB,iBAEE,2BACEA,GAAIqE,EAAQrE,GACZK,KAAK,OACLJ,MAAOf,EACPoB,SAjCd,SAAkCf,GAChCJ,EAAmBI,EAAEgB,OAAON,QAiChBS,SAAUwB,KAGd,kBAAC,GAAD,CACE7B,KAAK,SACLuB,WAAW,UACXjB,QA7C0C,2CA8C1CD,SAAUwB,GAJZ,UAQA,kBAAC,GAAD,CACE7B,KAAK,SACLuB,WAAW,UACXjB,QAAS,kBAAMsB,GAAiB,IAChCvB,SAAUwB,GAJZ,WAWF,4BACGmC,EAAQpE,MACT,kBAAC,GAAD,CACEI,KAAK,SACLM,QAAS,kBAAMsB,GAAiB,KAFlC,WASN,kBAAC,GAAD,CAAOG,UAAWiC,EAAQrE,Q,6WCvGzB,IAAMsE,GAAyCzD,IAAH,KAiB/CD,GAGS2D,GAAuC,eVNvB,oIUOR,M,wJChBrB,IAAMC,GAAuBrG,IAAOC,IAAV,MAUpBkF,GAAa,GAsCJmB,GApCE,WAGf,OAFAC,QAAQC,IAAI,YAGV,kBAAC,IAAD,CACE3E,GXX+B,mFWY/ByD,kBAAmBc,GACnBf,MAAOc,GACPhB,WAAYA,IAEf,YAA6F,IAA1FlE,EAAyF,EAAzFA,QAASsE,EAAgF,EAAhFA,MAAOhB,EAAyE,EAAzEA,KAAMiB,EAAmE,EAAnEA,8BAA+BC,EAAoC,EAApCA,8BACvD,GAAIxE,EAAS,MAAO,aAEpB,GAAIsE,EAAO,MAAM,UAAN,OAAiBA,EAAMG,eAElC,IAAMe,EAAWlC,EAAKqB,WAAWC,IAAI,SAAAC,GAAE,OAAIA,EAAGlB,WAE9C,OACE,kBAACyB,GAAD,KACE,kBAACK,EAAD,CAAmB7F,MAAO2E,IAE5BiB,GAAYA,EAASZ,IAAI,SAAAK,GAAO,OAC9B,kBAAC,GAAD,CACEH,IAAKG,EAAQrE,GACbqE,QAASA,EACThD,SAAUuC,U,qSCvCpB,IAAM1F,GAAUC,IAAOC,IAAV,MAKP0G,GAAe3G,IAAOC,IAAV,MAoCH2G,GA1BH,kBACV,oCACE,kBAAC,EAAD,MACA,kBAAC,GAAD,CAASC,UAAU,OACjB,kBAAC,IAAD,KACG,YAA+B,IAA5B5F,EAA2B,EAA3BA,QAASL,EAAkB,EAAlBA,YACX,OAAIK,EAAgB,KAEfL,EAUH,kBAAC,GAAD,MARE,kBAAC+F,GAAD,KACE,8CACA,6BAAK,kBAAC,IAAD,aCvBDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCVAC,GAAWC,YdJU,uBcMrBC,GAAOC,KAAWC,KAAK,CAACJ,GAAUK,MAEzB,OAAIC,KAAa,CAC9BJ,QACA7C,MAAO,IAAIkD,KAAc,CACvBC,iBAAkB,SAAAC,GAAM,OAAIA,EAAO/F,QCJvCgG,IAASC,OACP,kBAAC,IAAD,CAAiBC,OAAQA,GAAQC,WfRR,uBeSvB,kBAAC,GAAD,MACA,kBAAC,IAAD,OAEFC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e905a5fe.chunk.js","sourcesContent":["// This file was generated automatically by nostack.  If you build a new stack from a template, you should replace it.\n// If you modify your current stack to add actions, sources, or types, it would make sense to add constants here.\n\n// platform id\nexport const PLATFORM_ID = 'us-west-2_a3XGYPPYI';\n\n// action ids\nexport const UPDATE_TODO_ACTION_ID='7fe40fc7-c50f-49f5-917c-289d92f2e93f';\nexport const UPDATE_PROJECT_ACTION_ID='cfc49edd-e9aa-4dbc-88f6-5601279e537c';\nexport const CREATE_TODO_FOR_PROJECT_ACTION_ID='2e22b9ed-94a5-4759-bd55-543b6b01763b';\nexport const UPDATE_ISCOMPLETED_ACTION_ID='b1fdafd1-38c0-4b75-844b-86dae8ade91d';\nexport const CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID='7501f223-b88c-404b-96bc-6e02592df114';\nexport const CREATE_PROJECT_FOR_USER_ACTION_ID='9bbf029e-fd5b-427c-b2b2-869b8d9c794c';\n\n// source ids\nexport const SOURCE_TODOSOURCE_ID='collection_platform_TestStack154_collection_user_Collection_source_toDoSource';\nexport const SOURCE_PROJECTSOURCE_ID='collection_platform_TestStack154_collection_user_Collection_source_projectSource';\n\n// type ids\nexport const TYPE_PROJECT_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_projectSource_tree_projectSource_Tree_type_project';\nexport const TYPE_ISCOMPLETED_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_isCompleted';\nexport const TYPE_USER_ID='platform_TestStack154_userClass_user';\nexport const TYPE_TODO_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_toDo';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { LogoutButton } from 'no-stack';\n\nconst Wrapper = styled.div`\n  left: 0;\n  top: 0;\n  padding: 1em 3em;\n  font-size: 1rem;\n  color: #fffff0;\n  background-color: #00000f;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst NavBar = () => (\n  <Wrapper>\n    <div>stackbox todo</div>\n    <div>\n      <LogoutButton />\n    </div>\n  </Wrapper>\n);\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport compose from '@shopify/react-compose';\nimport { graphql } from '@apollo/react-hoc';\nimport styled from 'styled-components';\nimport { withNoStack, EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_PROJECT_FOR_USER_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ProjectForm({ createProject, currentUser, onAdd }) {\n  const [ projectValue, updateProjectValue ] = useState('');\n  const [ loading, updateLoading ] = useState(false);\n\n  function handleChange(e) {\n    updateProjectValue(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!projectValue) {\n      return;\n    }\n\n    updateLoading(true);\n\n    await createProject({\n      variables: {\n        actionId: CREATE_PROJECT_FOR_USER_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: currentUser.id,\n          value: projectValue,\n        }),\n        unrestricted: false,\n      },\n      update: onAdd(),\n    });\n\n    updateProjectValue('');\n    updateLoading(false);\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor=\"project-name\">\n        Project Name:\n        <input\n          id=\"project-name\"\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={projectValue}\n          disabled={loading}\n        />\n      </label>\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\n        {\n          loading \n            ? 'Creating Project...'\n            : 'Create Project'\n        }\n      </Button>\n    </Form>\n  );\n}\n\nexport default compose(withNoStack, graphql(EXECUTE_ACTION, { name: 'createProject' }))(ProjectForm);\n","import gql from 'graphql-tag';\n\nexport const PROJECT_FRAGMENT = gql`\n  fragment ProjectParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const TODO_FRAGMENT = gql`\n  fragment TodoParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const IS_COMPLETED_FRAGMENT = gql`\n  fragment IsCompletedParts on Instance {\n    id\n    value\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { graphql } from '@apollo/react-hoc';\nimport { EXECUTE_ACTION } from 'no-stack';\n\nimport { UPDATE_ISCOMPLETED_ACTION_ID } from '../../config';\nimport { IS_COMPLETED_FRAGMENT } from '../source-props/fragments';\n\nconst IsCompletedStyleWrapper = styled.span`\n  margin-left: 1.5em;\n  display: inline-block;\n  border: 1px solid #eeeeee;\n  padding: 0.5em;\n`;\n\nfunction IsCompleted({ isCompleted, label, updateInstance, onUpdate, disabled = false }) {\n  async function handleUpdateCompletion() {\n    const value = isCompleted.value === 'true' ? 'false' : 'true';\n\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_ISCOMPLETED_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value,\n          instanceId: isCompleted.id,\n        }),\n        unrestricted: false,\n      },\n      optimisticResponse: {\n        ExecuteAction: JSON.stringify({\n          id: isCompleted.id,\n          value,\n        }),\n      },\n      update: onUpdate(isCompleted.id, IS_COMPLETED_FRAGMENT),\n    });\n  }\n\n  return (\n    <IsCompletedStyleWrapper>\n      <label htmlFor={isCompleted.id}>\n        {label}\n        <input\n          id={isCompleted.id} \n          type=\"checkbox\" \n          checked={isCompleted.value === 'true'} \n          onChange={handleUpdateCompletion} \n          disabled={disabled}\n        />\n      </label>\n    </IsCompletedStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(IsCompleted);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from '@apollo/react-hoc';\n\nimport { UPDATE_TODO_ACTION_ID } from '../../config';\nimport { TODO_FRAGMENT } from '../source-props/fragments';\n\nimport IsCompleted from '../IsCompleted';\n\nconst TodoStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n\n  &:hover {\n    color: ${props => props.hoverColor || '#000000'};\n  }\n`;\n\nfunction Todo({ todo, isCompleted, updateInstance, onUpdate }) {\n  const [ todoValue, updateTodoValue ] = useState(todo.value);\n  const [ isEditMode, updateIsEditMode ] = useState(false);\n  const [ isSaving, updateIsSaving ] = useState(false);\n\n  function handleTodoValueChange(e) {\n    updateTodoValue(e.target.value);\n  }\n\n  async function handleTodoValueSave() {\n    updateIsSaving(true);\n\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: todoValue,\n          instanceId: todo.id,\n        }),\n        update: onUpdate(todo.id, TODO_FRAGMENT),\n      },\n    });\n\n    updateIsEditMode(false);\n    updateIsSaving(false);\n  }\n\n  return (\n    <TodoStyleWrapper>\n      {isEditMode ?\n        (\n          <>\n            <label htmlFor={todo.id}>\n              Todo Value:\n              <input\n                id={todo.id}\n                type=\"text\"\n                value={todoValue}\n                onChange={handleTodoValueChange}\n                disabled={isSaving}\n              />\n            </label>\n            <Button\n              type=\"button\"\n              hoverColor=\"#00FF00\"\n              onClick={handleTodoValueSave}\n              disabled={isSaving}\n            >\n              &#10003;\n            </Button>\n            <Button\n              type=\"button\"\n              hoverColor=\"#FF0000\"\n              onClick={() => updateIsEditMode(false)}\n              disabled={isSaving}\n            >\n              &#10005;\n            </Button>\n          </>\n        ) :\n        (\n          <>\n            {todoValue}\n            <Button\n              type=\"button\"\n              onClick={() => updateIsEditMode(true)}\n            >\n              &#9998;\n            </Button>\n            <IsCompleted\n              isCompleted={isCompleted}\n              label=\"Done?\"\n              onUpdate={onUpdate}\n            />\n          </>\n        )\n      }\n    </TodoStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Todo);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport compose from '@shopify/react-compose';\nimport { graphql } from '@apollo/react-hoc';\n\nimport { EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_TODO_FOR_PROJECT_ACTION_ID, CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction CreateTodoForm({ projectId, createTodo, createIsCompleted, onAdd }) {\n  const [ todoValue, updateTodoValue ] = useState('');\n  const [ loading, updateLoading ] = useState(false);\n\n  function handleChange(e) {\n    updateTodoValue(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!todoValue) {\n      return;\n    }\n\n    updateLoading(true);\n\n    const createTodoResponse = await createTodo({\n      variables: {\n        actionId: CREATE_TODO_FOR_PROJECT_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: projectId,\n          value: todoValue,\n        }),\n        unrestricted: false,\n      },\n    });\n\n    const newTodoData = JSON.parse(createTodoResponse.data.ExecuteAction);\n\n    await createIsCompleted({\n      variables: {\n        actionId: CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: newTodoData.instanceId,\n          value: 'false',\n        }),\n        unrestricted: false,\n      },\n      update: (cache, response) => {\n        const isCompletedData = JSON.parse(response.data.ExecuteAction);\n\n        const newTodo = {\n          instance: {\n            id: newTodoData.instanceId,\n            value: newTodoData.value,\n            __typename: 'Instance',\n          },\n          children: [\n            {\n              instance: {\n                id: isCompletedData.instanceId,\n                value: isCompletedData.value,\n                __typename: 'Instance',\n              },\n              __typename: 'InstanceWithChildren',\n            },\n          ],\n          __typename: 'InstanceWithChildren',\n        };\n\n        onAdd(newTodo)(cache);\n      },\n    });\n\n    updateTodoValue('');\n    updateLoading(false);\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor='todo-name'>\n        Todo Value:\n        <input\n          id='todo-name'\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={todoValue}\n          disabled={loading}\n        />\n      </label>\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\n        {\n          loading\n            ? 'Adding Todo...'\n            : 'Add Todo'\n        }\n      </Button>\n    </Form>\n  );\n}\n\nexport default compose(\n  graphql(EXECUTE_ACTION, { name: 'createTodo' }),\n  graphql(EXECUTE_ACTION, { name: 'createIsCompleted' }),\n)(CreateTodoForm);\n","import gql from 'graphql-tag';\nimport { TYPE_TODO_ID, TYPE_ISCOMPLETED_ID } from '../../config';\n\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from './fragments';\n\nexport const TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        ...TodoParts\n      }\n      children {\n        instance {\n          ...IsCompletedParts\n        }\n      }\n    }\n  }\n\n  ${TODO_FRAGMENT}\n  ${IS_COMPLETED_FRAGMENT}\n`;\n\nexport const TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS = {\n  [TYPE_TODO_ID]: {\n    [TYPE_ISCOMPLETED_ID]: null,\n  },\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Source } from 'no-stack';\n\nimport Todo from '../Todo';\nimport CreateTodoForm from '../CreateTodoForm';\n\nimport {SOURCE_TODOSOURCE_ID} from \"../../config\";\nimport {TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS, TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY} from \"../source-props/todo\";\n\nconst TodoListStyleWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`;\n\nfunction Todos({ projectId }) {\n  const parameters = {\n    currentProjectId: projectId,\n  };\n\n  return (\n    <Source\n      id={SOURCE_TODOSOURCE_ID}\n      query={TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY}\n      typeRelationships={TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS}\n      parameters={parameters}\n    >\n      {({loading, error, data, updateSourceAfterCreateAction, updateSourceAfterUpdateAction}) => {\n        if (loading) return 'Loading...';\n\n        if (error) return `Error: ${error.graphQLErrors}`;\n\n        const todos = data.sourceData.map(el => ({\n          ...el.instance,\n          isCompleted: el.children[0].instance,\n        }));\n\n        return (\n          <>\n            <CreateTodoForm projectId={projectId} onAdd={updateSourceAfterCreateAction} />\n            <TodoListStyleWrapper>\n              {\n                todos && todos.map(todo => (\n                  <Todo\n                    key={todo.id}\n                    todo={todo}\n                    isCompleted={todo.isCompleted}\n                    onUpdate={updateSourceAfterUpdateAction}\n                  />\n                ))\n              }\n            </TodoListStyleWrapper>\n          </>\n        );\n      }}\n    </Source>\n  );\n}\n\n\nexport default Todos;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from '@apollo/react-hoc';\n\nimport { UPDATE_PROJECT_ACTION_ID } from '../../config';\nimport { PROJECT_FRAGMENT } from '../source-props/fragments';\n\nimport Todos from '../Todos';\n\nconst ProjectStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Row = styled.div`\n  margin: 1em 0;\n`;\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n\n  &:hover {\n    color: ${props => props.hoverColor || '#000000'};\n  }\n`;\n\nfunction Project({ project, updateInstance, onUpdate }) {\n  const [ projectValue, updateProjectValue ] = useState(project.value);\n  const [ isEditMode, updateIsEditMode ] = useState(false);\n  const [ isSaving, updateIsSaving ] = useState(false);\n\n  function handleProjectValueChange(e) {\n    updateProjectValue(e.target.value);\n  }\n\n  async function handleProjectValueSave() {\n    updateIsSaving(true);\n    \n    await updateInstance({\n      variables: {\n        actionId: UPDATE_PROJECT_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: projectValue,\n          instanceId: project.id,\n        }),\n      },\n      update: onUpdate(project.id, PROJECT_FRAGMENT),\n    });\n\n    updateIsEditMode(false);\n    updateIsSaving(false);\n  }\n\n  return (\n    <ProjectStyleWrapper>\n      {isEditMode ?\n        (\n          <Row>\n            <label htmlFor={project.id}>\n              Project Value:\n              <input\n                id={project.id}\n                type=\"text\"\n                value={projectValue}\n                onChange={handleProjectValueChange}\n                disabled={isSaving}\n              />\n            </label>\n            <Button\n              type=\"button\"\n              hoverColor=\"#00FF00\"\n              onClick={handleProjectValueSave}\n              disabled={isSaving}\n            >\n              &#10003;\n            </Button>\n            <Button\n              type=\"button\"\n              hoverColor=\"#FF0000\"\n              onClick={() => updateIsEditMode(false)}\n              disabled={isSaving}\n            >\n              &#10005;\n            </Button>\n          </Row>\n        ) : \n        (\n          <h3>\n            {project.value}\n            <Button\n              type=\"button\"\n              onClick={() => updateIsEditMode(true)}\n            >\n              &#9998;\n            </Button>\n          </h3>\n        )\n      }\n      <Todos projectId={project.id} />\n    </ProjectStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Project);\n","import gql from 'graphql-tag';\nimport { TYPE_PROJECT_ID } from '../../config';\n\nimport { PROJECT_FRAGMENT } from './fragments';\n\nexport const PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        ...ProjectParts\n      }\n    }\n  }\n\n  ${PROJECT_FRAGMENT}\n`;\n\nexport const PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS = {\n  [TYPE_PROJECT_ID]: null,\n};\n\n","import React from 'react';\nimport { Source } from 'no-stack';\nimport styled from 'styled-components';\n\nimport CreateProjectForm from '../CreateProjectForm';\nimport Project from '../Project';\n\nimport { SOURCE_PROJECTSOURCE_ID } from '../../config';\nimport { PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS, PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY } from '../source-props/project';\n\nconst ProjectsStyleWrapper = styled.div`\n  input {\n    margin: 0 0.5em;\n  }\n\n  button {\n    margin: 0 0.5em;\n  }\n`;\n\nconst parameters = {};\n\nconst Projects = () => {\n  console.log('projects');\n  \n  return (\n    <Source\n      id={SOURCE_PROJECTSOURCE_ID}\n      typeRelationships={PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS}\n      query={PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY}\n      parameters={parameters}\n    >\n  {({ loading, error, data, updateSourceAfterCreateAction, updateSourceAfterUpdateAction }) => {\n    if (loading) return 'Loading...';\n\n    if (error) return `Error: ${error.graphQLErrors}`;\n\n    const projects = data.sourceData.map(el => el.instance);\n\n    return (\n      <ProjectsStyleWrapper>\n        <CreateProjectForm onAdd={updateSourceAfterCreateAction} />\n    {\n      projects && projects.map(project => (\n        <Project \n          key={project.id} \n          project={project}\n          onUpdate={updateSourceAfterUpdateAction}\n        />\n      ))\n        }\n      </ProjectsStyleWrapper>\n    );\n      }}\n    </Source>\n  );\n}\n\nexport default Projects;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { NoStackConsumer, LoginForm } from 'no-stack';\n\nimport NavBar from './components/NavBar';\nimport Projects from './components/Projects';\n\nconst Wrapper = styled.div`\n  padding: 5em 5em;\n  min-width: 480px;\n`;\n\nconst LoginWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  div {\n    margin: 0.5em;\n  }\n`;\n\nconst App = () => (\n  <>\n    <NavBar />\n    <Wrapper className=\"App\">\n      <NoStackConsumer>\n        {({ loading, currentUser }) => {\n          if (loading) return null;\n\n          if (!currentUser) {\n            return (\n              <LoginWrapper>\n                <div>Please Log In</div>\n                <div><LoginForm /></div>\n              </LoginWrapper>\n            );\n          }\n\n          return (\n            <Projects />\n          );\n        }}\n      </NoStackConsumer>\n    </Wrapper>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { createAuthLink, httpLink } from 'no-stack';\n\nimport { PLATFORM_ID } from '../config';\n\nconst authLink = createAuthLink(PLATFORM_ID);\n\nconst link = ApolloLink.from([authLink, httpLink]);\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({\n    dataIdFromObject: object => object.id,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { NoStackProvider, Console } from 'no-stack';\n\nimport { PLATFORM_ID } from './config';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport client from './client';\n\nReactDOM.render(\n  <NoStackProvider client={client} platformId={PLATFORM_ID}>\n    <App />\n    <Console />\n  </NoStackProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}