{"version":3,"sources":["config/index.js","components/NavBar/index.js","components/CreateProjectForm/index.js","components/Project/fragments.js","components/Todo/index.js","components/CreateTodoForm/index.js","components/Project/index.js","components/Projects/index.js","App.js","serviceWorker.js","client/index.js","index.js"],"names":["UPDATE_TODO_ACTION_ID","CREATE_TODO_FOR_PROJECT_ACTION_ID","UPDATE_ISCOMPLETED_ACTION_ID","CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID","CREATE_PROJECT_FOR_USER_ACTION_ID","SOURCE_TODOSOURCE_ID","Wrapper","styled","div","_templateObject","NavBar","react_default","a","createElement","no_stack","Form","CreateProjectForm_templateObject","Button","button","_templateObject2","compose","withNoStack","graphql","EXECUTE_ACTION","name","_ref","createProject","currentUser","onAdd","_useState","useState","_useState2","Object","slicedToArray","projectName","updateProjectName","handleSubmit","_x","_handleSubmit","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","preventDefault","abrupt","variables","actionId","executionParameters","JSON","stringify","parentInstanceId","id","value","unrestricted","update","stop","htmlFor","type","onChange","target","onKeyPress","charCode","onClick","TODO_FRAGMENT","gql","fragments_templateObject","IS_COMPLETED_FRAGMENT","fragments_templateObject2","TodoStyleWrapper","Todo_templateObject","DoneTodoDiv","Todo_templateObject2","_templateObject3","isCompleted","updateInstance","onUpdate","todoName","updateTodoName","handleTodoNameSave","_handleTodoNameSave","instanceId","handleUpdateCompletion","_handleUpdateCompletion","_callee2","completed","_context2","optimisticResponse","ExecuteAction","inputFieldId","concat","onBlur","onKeyDown","key","Todo_Button","CreateTodoForm_templateObject","CreateTodoForm_templateObject2","projectId","createTodo","createIsCompleted","createTodoResponse","newTodoData","sent","parse","data","cache","response","isCompletedData","newTodo","instance","__typename","children","CreateTodoForm_Form","CreateTodoForm_Button","ProjectStyleWrapper","Project_templateObject","Todos","Project_templateObject2","typeRelationships","defineProperty","TODO_QUERY","Project_templateObject3","Project","project","parameters","currentProjectId","query","_ref2","loading","error","updateSourceAfterCreateAction","updateSourceAfterUpdateAction","graphQLErrors","todos","sourceData","map","el","objectSpread","Fragment","components_CreateTodoForm","todo","components_Todo","SOURCE_QUERY","Projects_templateObject","Projects","projects","CreateProjectForm","components_Project","App_templateObject","LoginWrapper","App_templateObject2","App","components_NavBar","App_Wrapper","className","components_Projects","Boolean","window","location","hostname","match","authLink","createAuthLink","link","ApolloLink","from","httpLink","client","ApolloClient","InMemoryCache","dataIdFromObject","object","ReactDOM","render","react_apollo_esm","platformId","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b79a313f.chunk.js","sourcesContent":["// This file was generated automatically by nostack.  If you build a new stack from a template, you should replace it.\n// If you modify your current stack to add actions, sources, or types, it would make sense to add constants here.\n\n// platform id\nexport const PLATFORM_ID = 'us-west-2_uA9WKJuN2';\n\n// action ids\nexport const UPDATE_TODO_ACTION_ID='e30485ce-d4f1-4cc4-8a20-5976cbd250b5';\nexport const UPDATE_PROJECT_ACTION_ID='a553abff-3495-4561-b094-dbd710861634';\nexport const CREATE_TODO_FOR_PROJECT_ACTION_ID='05982a27-21bc-47f8-b0b5-1401f3931497';\nexport const UPDATE_ISCOMPLETED_ACTION_ID='2da0205b-36d5-41ba-8102-f1c75b7cc6d1';\nexport const CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID='abaeb75d-3c2c-4795-9a6e-8322809009d2';\nexport const CREATE_PROJECT_FOR_USER_ACTION_ID='bc9d9f8f-373a-4406-8217-5d06f39e9371';\n\n// source ids\nexport const SOURCE_TODOSOURCE_ID='collection_platform_TestStack118_collection_user_Collection_source_toDoSource';\nexport const SOURCE_PROJECTSOURCE_ID='collection_platform_TestStack118_collection_user_Collection_source_projectSource';\n\n// type ids\nexport const TYPE_PROJECT_ID='tree_source_collection_platform_TestStack118_collection_user_Collection_source_projectSource_tree_projectSource_Tree_type_project';\nexport const TYPE_ISCOMPLETED_ID='tree_source_collection_platform_TestStack118_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_isCompleted';\nexport const TYPE_USER_ID='platform_TestStack118_userClass_user';\nexport const TYPE_TODO_ID='tree_source_collection_platform_TestStack118_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_toDo';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { LogoutButton } from 'no-stack';\n\nconst Wrapper = styled.div`\n  left: 0;\n  top: 0;\n  padding: 1em 3em;\n  font-size: 1rem;\n  color: #fffff0;\n  background-color: #00000f;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst NavBar = () => (\n  <Wrapper>\n    <div>stackbox todo</div>\n    <div>\n      <LogoutButton />\n    </div>\n  </Wrapper>\n);\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport styled from 'styled-components';\nimport { withNoStack, EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_PROJECT_FOR_USER_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ProjectForm({ createProject, currentUser, onAdd }) {\n  const [ projectName, updateProjectName ] = useState('');\n\n  function handleChange(e) {\n    updateProjectName(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!projectName) {\n      return;\n    }\n\n    await createProject({\n      variables: {\n        actionId: CREATE_PROJECT_FOR_USER_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: currentUser.id,\n          value: projectName,\n        }),\n        unrestricted: false,\n      },\n      update: onAdd(),\n    });\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor=\"project-name\">\n        Project Name:\n        <input\n          id=\"project-name\"\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={projectName} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>Create Project</Button>\n    </Form>\n  );\n}\n\nexport default compose(withNoStack, graphql(EXECUTE_ACTION, { name: 'createProject' }))(ProjectForm);\n","import gql from 'graphql-tag';\n\nexport const TODO_FRAGMENT = gql`\n  fragment TodoParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const IS_COMPLETED_FRAGMENT = gql`\n  fragment IsCompletedParts on Instance {\n    id\n    value\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from 'react-apollo';\n\nimport { UPDATE_TODO_ACTION_ID, UPDATE_ISCOMPLETED_ACTION_ID } from '../../config';\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from '../Project/fragments';\n\nconst TodoStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst DoneTodoDiv = styled.div`\n  background-color: #FF6347;\n  font-weight: bold;\n  padding: 1.5em;\n  margin: 1.5em auto;\n  text-decoration: line-through;\n  cursor: pointer;\n  max-width: 200px;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction Todo({ id, name, isCompleted, updateInstance, onUpdate }) {\n  const [ todoName, updateTodoName ] = useState(name);\n\n  function handleTodoNameChange(e) {\n    updateTodoName(e.target.value);\n  }\n\n  async function handleTodoNameSave() {\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: todoName,\n          instanceId: id,\n        }),\n        update: onUpdate(id, TODO_FRAGMENT),\n      },\n    })\n  }\n\n  function handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      handleTodoNameSave();\n    }\n  }\n\n  async function handleUpdateCompletion(completed) {\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_ISCOMPLETED_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: completed,\n          instanceId: isCompleted.id,\n        }),\n        unrestricted: false,\n      },\n      optimisticResponse: {\n        ExecuteAction: JSON.stringify({\n          id: isCompleted.id,\n          value: completed,\n        })\n      },\n      update: onUpdate(isCompleted.id, IS_COMPLETED_FRAGMENT),\n    });\n  }\n\n  const inputFieldId = `todo-name-${id}`\n\n  return (\n    <TodoStyleWrapper>\n      <div>\n        {isCompleted.value === 'true' ?\n          (\n            <DoneTodoDiv onClick={() => handleUpdateCompletion('false')}>\n              {todoName}\n            </DoneTodoDiv>\n          ) :\n          (\n            <div>\n              <label htmlFor={inputFieldId}>\n                Todo Name:\n                <input\n                  id={inputFieldId}\n                  type=\"text\"\n                  value={todoName}\n                  onChange={handleTodoNameChange}\n                  onBlur={handleTodoNameSave}\n                  onKeyDown={handleKeyDown}\n                />\n                <Button type=\"button\" onClick={() => handleUpdateCompletion('true')}>\n                  Mark as Done\n                </Button>\n              </label>\n            </div>\n          )\n        }\n      </div>\n    </TodoStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Todo);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { graphql, compose } from 'react-apollo';\n\nimport { EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_TODO_FOR_PROJECT_ACTION_ID, CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction CreateTodoForm({ projectId, createTodo, createIsCompleted, onAdd }) {\n  const [ todoName, updateTodoName ] = useState('');\n\n  function handleChange(e) {\n    updateTodoName(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!todoName) {\n      return;\n    }\n\n    const createTodoResponse = await createTodo({\n      variables: {\n        actionId: CREATE_TODO_FOR_PROJECT_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: projectId,\n          value: todoName,\n        }),\n        unrestricted: false,\n      },\n    });\n\n    const newTodoData = JSON.parse(createTodoResponse.data.ExecuteAction);\n\n    await createIsCompleted({\n      variables: {\n        actionId: CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: newTodoData.instanceId,\n          value: 'false',\n        }),\n        unrestricted: false,\n      },\n      update: (cache, response) => {\n        const isCompletedData = JSON.parse(response.data.ExecuteAction);\n\n        const newTodo = {\n          instance: {\n            id: newTodoData.instanceId,\n            value: newTodoData.value,\n            __typename: 'Instance',\n          },\n          children: [\n            {\n              instance: {\n                id: isCompletedData.instanceId,\n                value: isCompletedData.value,\n                __typename: 'Instance',\n              },\n              __typename: 'InstanceWithChildren',\n            },\n          ],\n          __typename: 'InstanceWithChildren',\n        };\n\n        onAdd(newTodo)(cache);\n      },\n    });\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor='todo-name'>\n        Todo Name:\n        <input\n          id='todo-name'\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={todoName} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>Add Todo</Button>\n    </Form>\n  );\n}\n\nexport default compose(\n  graphql(EXECUTE_ACTION, { name: 'createTodo' }),\n  graphql(EXECUTE_ACTION, { name: 'createIsCompleted' }),\n)(CreateTodoForm);\n","import React from 'react';\nimport styled from 'styled-components';\nimport gql from 'graphql-tag';\nimport { Source } from 'no-stack';\n\nimport Todo from '../Todo';\nimport CreateTodoForm from '../CreateTodoForm';\n\nimport { SOURCE_TODOSOURCE_ID, TYPE_TODO_ID, TYPE_ISCOMPLETED_ID } from '../../config';\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from './fragments';\n\nconst ProjectStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Todos = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`;\n\nconst typeRelationships = {\n  [TYPE_TODO_ID]: {\n    [TYPE_ISCOMPLETED_ID]: null,\n  },\n};\n\nconst TODO_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        ...TodoParts\n      }\n      children {\n        instance {\n          ...IsCompletedParts\n        }\n      }\n    }\n  }\n\n  ${TODO_FRAGMENT}\n  ${IS_COMPLETED_FRAGMENT}\n`;\n\nfunction Project({ project }) {\n  const parameters = {\n    currentProjectId: project.id\n  };\n\n  return (\n    <ProjectStyleWrapper>\n      <h3>{project.value}</h3>\n      <Source\n        id={SOURCE_TODOSOURCE_ID}\n        typeRelationships={typeRelationships}\n        query={TODO_QUERY}\n        parameters={parameters}\n      >\n        {({ loading, error, data, updateSourceAfterCreateAction, updateSourceAfterUpdateAction}) => {\n          if (loading) return 'Loading...';\n\n          if (error) return `Error: ${error.graphQLErrors}`;\n\n          const todos = data.sourceData.map(el => ({\n            ...el.instance,\n            isCompleted: el.children[0].instance,\n          }));\n\n          return (\n            <>\n              <CreateTodoForm projectId={project.id} onAdd={updateSourceAfterCreateAction} />\n              <Todos>\n                {todos.map(todo => (\n                  <Todo\n                    key={todo.id}\n                    id={todo.id}\n                    name={todo.value}\n                    isCompleted={todo.isCompleted}\n                    onUpdate={updateSourceAfterUpdateAction}\n                  />\n                ))}\n              </Todos>\n            </>\n          );\n        }}\n      </Source>\n    </ProjectStyleWrapper>\n  )\n}\n\nexport default Project;\n","import React from 'react';\nimport { Source } from 'no-stack';\nimport gql from 'graphql-tag';\n\nimport CreateProjectForm from '../CreateProjectForm';\nimport Project from '../Project';\n\nimport { SOURCE_PROJECTSOURCE_ID, TYPE_PROJECT_ID } from '../../config';\n\nconst typeRelationships = {\n  [TYPE_PROJECT_ID]: null,\n};\n\nconst parameters = {};\n\nconst SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        id\n        value\n      }\n    }\n  }\n`;\n\nconst Projects = () => (\n  <Source\n    id={SOURCE_PROJECTSOURCE_ID}\n    typeRelationships={typeRelationships}\n    query={SOURCE_QUERY}\n    parameters={parameters}\n  >\n    {({ loading, error, data, updateSourceAfterCreateAction }) => {\n      if (loading) return 'Loading...';\n\n      if (error) return `Error: ${error.graphQLErrors}`;\n\n      const projects = data.sourceData.map(el => el.instance);\n\n      return (\n        <>\n          <CreateProjectForm onAdd={updateSourceAfterCreateAction} />\n          {\n            projects && projects.map(project => (\n              <Project key={project.id} project={project} />\n            ))\n          }\n        </>\n      );\n    }}\n  </Source>\n);\n\nexport default Projects;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { NoStackConsumer, LoginForm } from 'no-stack';\n\nimport NavBar from './components/NavBar';\nimport Projects from './components/Projects';\n\nconst Wrapper = styled.div`\n  padding: 5em 5em;\n  min-width: 480px;\n`;\n\nconst LoginWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  div {\n    margin: 0.5em;\n  }\n`;\n\nconst App = () => (\n  <>\n    <NavBar />\n    <Wrapper className=\"App\">\n      <NoStackConsumer>\n        {({ loading, currentUser }) => {\n          if (loading) return null;\n\n          if (!currentUser) {\n            return (\n              <LoginWrapper>\n                <div>Please Log In</div>\n                <div><LoginForm /></div>\n              </LoginWrapper>\n            );\n          }\n\n          return (\n            <Projects />\n          );\n        }}\n      </NoStackConsumer>\n    </Wrapper>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { createAuthLink, httpLink } from 'no-stack';\n\nimport { PLATFORM_ID } from '../config';\n\nconst authLink = createAuthLink(PLATFORM_ID);\n\nconst link = ApolloLink.from([authLink, httpLink]);\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({\n    dataIdFromObject: object => object.id,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { NoStackProvider, Console } from 'no-stack';\n\nimport { PLATFORM_ID } from './config';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport client from './client';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <NoStackProvider client={client} platformId={PLATFORM_ID}>\n      <App />\n      <Console />\n    </NoStackProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}