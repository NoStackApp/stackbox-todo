{"version":3,"sources":["config/index.js","components/NavBar/index.js","components/ProjectForm/index.js","components/Project/fragments.js","components/Item/index.js","components/ItemForm/index.js","components/Project/index.js","components/Projects/index.js","App.js","serviceWorker.js","client/index.js","index.js"],"names":["UPDATE_TODO_ACTION_ID","CREATE_TODO_FOR_PROJECT_ACTION_ID","UPDATE_ISCOMPLETED_ACTION_ID","CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID","CREATE_PROJECT_FOR_USER_ACTION_ID","SOURCE_TODOSOURCE_ID","Wrapper","styled","div","_templateObject","NavBar","react_default","a","createElement","no_stack","Form","ProjectForm_templateObject","Button","button","_templateObject2","compose","withNoStack","graphql","EXECUTE_ACTION","name","_ref","createProject","currentUser","onAdd","_useState","useState","_useState2","Object","slicedToArray","projectName","updateProjectName","id","v4","inputFieldId","concat","handleSubmit","_x","_handleSubmit","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","preventDefault","abrupt","variables","actionId","executionParameters","JSON","stringify","parentInstanceId","value","unrestricted","update","stop","htmlFor","type","onChange","target","onKeyPress","charCode","onClick","TODO_FRAGMENT","gql","fragments_templateObject","IS_COMPLETED_FRAGMENT","fragments_templateObject2","Item_templateObject","DoneItemDiv","Item_templateObject2","_templateObject3","isCompleted","updateInstance","itemName","updateItemName","handleItemNameSave","_handleItemNameSave","instanceId","cache","_ref2","ExecuteAction","data","parse","writeFragment","fragment","__typename","handleUpdateCompletion","_handleUpdateCompletion","_callee2","completed","_context2","optimisticResponse","_ref3","Item_Wrapper","onBlur","onKeyDown","key","Item_Button","ItemForm_templateObject","ItemForm_templateObject2","projectId","createItem","createIsCompleted","response","ItemForm_Form","ItemForm_Button","TODO_QUERY","Project_templateObject","Project_templateObject2","Items","Project_templateObject3","typeHierarchy","defineProperty","Project","project","parameters","onItemDelete","currentProjectId","Project_Wrapper","query","loading","error","updateSourceAfterCreateAction","graphQLErrors","items","sourceData","map","el","objectSpread","instance","children","Fragment","components_ItemForm","item","components_Item","SOURCE_QUERY","Projects_templateObject","Projects","projects","components_ProjectForm","components_Project","App_templateObject","LoginWrapper","App_templateObject2","App","components_NavBar","App_Wrapper","className","components_Projects","Boolean","window","location","hostname","match","authLink","createAuthLink","link","ApolloLink","from","httpLink","client","ApolloClient","InMemoryCache","dataIdFromObject","object","ReactDOM","render","react_apollo_esm","platformId","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f596e125.chunk.js","sourcesContent":["// This file was generated automatically by nostack.  If you build a new stack from a template, you should replace it.\n// If you modify your current stack to add actions, sources, or types, it would make sense to add constants here.\n\n// platform id\nexport const PLATFORM_ID = 'us-west-2_yaRqTdbKu';\n\n// action ids\nexport const UPDATE_TODO_ACTION_ID='7e204fa3-2819-4642-951f-813f67f3931a';\nexport const UPDATE_PROJECT_ACTION_ID='22f644f4-9c51-4548-a35c-82753298d045';\nexport const CREATE_TODO_FOR_PROJECT_ACTION_ID='fefb3f2e-7045-45bc-85d3-eb78cfe2de53';\nexport const UPDATE_ISCOMPLETED_ACTION_ID='0d9b4597-1b05-401a-b3e7-184e0509e012';\nexport const CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID='abbd918c-4281-4482-b82f-fcce8abfed97';\nexport const CREATE_PROJECT_FOR_USER_ACTION_ID='58b9bf16-d311-4e0c-b0f0-96c7ea0e53e3';\n\n// source ids\nexport const SOURCE_TODOSOURCE_ID='collection_platform_TestStack113_collection_user_Collection_source_toDoSource';\nexport const SOURCE_PROJECTSOURCE_ID='collection_platform_TestStack113_collection_user_Collection_source_projectSource';\n\n// type ids\nexport const TYPE_PROJECT_ID='tree_source_collection_platform_TestStack113_collection_user_Collection_source_projectSource_tree_projectSource_Tree_type_project';\nexport const TYPE_ISCOMPLETED_ID='tree_source_collection_platform_TestStack113_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_isCompleted';\nexport const TYPE_USER_ID='platform_TestStack113_userClass_user';\nexport const TYPE_TODO_ID='tree_source_collection_platform_TestStack113_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_toDo';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { LogoutButton } from 'no-stack';\n\nconst Wrapper = styled.div`\n  left: 0;\n  top: 0;\n  padding: 1em 3em;\n  font-size: 1rem;\n  color: #fffff0;\n  background-color: #00000f;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst NavBar = () => (\n  <Wrapper>\n    <div>stackbox todo</div>\n    <div>\n      <LogoutButton />\n    </div>\n  </Wrapper>\n);\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport styled from 'styled-components';\nimport { v4 } from 'uuid';\nimport { withNoStack, EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_PROJECT_FOR_USER_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ProjectForm({ createProject, currentUser, onAdd }) {\n  const [ projectName, updateProjectName ] = useState('');\n\n  const id = v4();\n  const inputFieldId = `item-name-field-${id}`;\n\n  function handleChange(e) {\n    updateProjectName(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!projectName) {\n      return;\n    }\n\n    await createProject({\n      variables: {\n        // Create Project action\n        actionId: CREATE_PROJECT_FOR_USER_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: currentUser.id,\n          value: projectName,\n        }),\n        unrestricted: false,\n      },\n      update: onAdd,\n    });\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor={inputFieldId}>\n        Project Name:\n        <input\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={projectName} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>Create Project</Button>\n    </Form>\n  );\n}\n\nexport default compose(withNoStack, graphql(EXECUTE_ACTION, { name: 'createProject' }))(ProjectForm);\n","import gql from 'graphql-tag';\n\nexport const TODO_FRAGMENT = gql`\n  fragment TodoParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const IS_COMPLETED_FRAGMENT = gql`\n  fragment IsCompletedParts on Instance {\n    id\n    value\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from 'react-apollo';\n\nimport { UPDATE_TODO_ACTION_ID, UPDATE_ISCOMPLETED_ACTION_ID } from '../../config';\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from '../Project/fragments';\n\nconst Wrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst DoneItemDiv = styled.div`\n  background-color: #FF6347;\n  font-weight: bold;\n  padding: 1.5em;\n  margin: 1.5em auto;\n  text-decoration: line-through;\n  cursor: pointer;\n  max-width: 200px;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction Item({ id, name, isCompleted, updateInstance }) {\n  const [ itemName, updateItemName ] = useState(name);\n\n  function handleItemNameChange(e) {\n    updateItemName(e.target.value);\n  }\n\n  async function handleItemNameSave() {\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: itemName,\n          instanceId: id,\n        }),\n        update: (cache, { data: ExecuteAction }) => {\n          const data = JSON.parse(ExecuteAction);\n\n          cache.writeFragment({\n            id,\n            fragment: TODO_FRAGMENT,\n            data: {\n              id,\n              value: data.value,\n              __typename: 'Instance',\n            },\n          });\n        },\n      },\n    })\n  }\n\n  function handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      handleItemNameSave();\n    }\n  }\n\n  async function handleUpdateCompletion(completed) {\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_ISCOMPLETED_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: completed,\n          instanceId: isCompleted.id,\n        }),\n        unrestricted: false,\n      },\n      optimisticResponse: {\n        ExecuteAction: JSON.stringify({\n          id: isCompleted.id,\n          value: completed,\n        })\n      },\n      update: (cache, { data: { ExecuteAction } }) => {\n        const data = JSON.parse(ExecuteAction);\n\n        cache.writeFragment({\n          id: isCompleted.id,\n          fragment: IS_COMPLETED_FRAGMENT,\n          data: {\n            id: isCompleted.id,\n            value: data.value,\n            __typename: \"Instance\",\n          },\n        });\n      }\n    });\n  }\n\n  const inputFieldId = `item-name-${id}`\n\n  return (\n    <Wrapper>\n      <div>\n        {isCompleted.value === 'true' ?\n          (\n            <DoneItemDiv onClick={() => handleUpdateCompletion('false')}>\n              {itemName}\n            </DoneItemDiv>\n          ) :\n          (\n            <div>\n              <label htmlFor={inputFieldId}>\n                Item Name:\n                <input\n                  id={inputFieldId}\n                  type=\"text\"\n                  value={itemName}\n                  onChange={handleItemNameChange}\n                  onBlur={handleItemNameSave}\n                  onKeyDown={handleKeyDown}\n                />\n                <Button type=\"button\" onClick={() => handleUpdateCompletion('true')}>\n                  Mark as Done\n                </Button>\n              </label>\n            </div>\n          )\n        }\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Item);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { v4 } from 'uuid';\nimport { graphql, compose } from 'react-apollo';\n\nimport { EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_TODO_FOR_PROJECT_ACTION_ID, CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ItemForm({ projectId, createItem, createIsCompleted, onAdd }) {\n  const [ itemName, updateItemName ] = useState('');\n\n  const id = v4();\n  const inputFieldId = `item-name-field-${id}`;\n\n  function handleChange(e) {\n    updateItemName(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!itemName) {\n      return;\n    }\n\n    await createItem({\n      variables: {\n        actionId: CREATE_TODO_FOR_PROJECT_ACTION_ID, \n        executionParameters: JSON.stringify({\n          parentInstanceId: projectId,\n          value: itemName,\n        }),\n        unrestricted: false,\n      },\n      update: (cache, response) => {\n        const data = JSON.parse(response.data.ExecuteAction);\n\n        createIsCompleted({\n          variables: {\n            actionId: CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID,\n              executionParameters: JSON.stringify({\n                parentInstanceId: data.instanceId,\n                value: 'false',\n              }),\n              unrestricted: false, \n          },\n          update: () => {\n            onAdd(cache, response);\n          }\n        });\n      }, \n    });\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);      \n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor={inputFieldId}>\n        Item Name:{' '}\n        <input \n          id={inputFieldId}\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={itemName} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>Add Item</Button>\n    </Form>\n  );\n}\n\nexport default compose(\n  graphql(EXECUTE_ACTION, { name: 'createItem' }),\n  graphql(EXECUTE_ACTION, { name: 'createIsCompleted' }),\n)(ItemForm);\n","import React from 'react';\nimport styled from 'styled-components';\nimport gql from 'graphql-tag';\nimport { Source } from 'no-stack';\n\nimport Item from '../Item';\nimport ItemForm from '../ItemForm';\n\nimport { SOURCE_TODOSOURCE_ID, TYPE_TODO_ID, TYPE_ISCOMPLETED_ID } from '../../config';\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from './fragments';\n\nconst TODO_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeHierarchy: String!\n    $unrestricted: Boolean!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeHierarchy: $typeHierarchy\n      unrestricted: $unrestricted\n      parameters: $parameters\n    ) {\n      instance {\n        ...TodoParts\n      }\n      children {\n        instance {\n          ...IsCompletedParts\n        }\n      }\n    }\n  }\n\n  ${TODO_FRAGMENT}\n  ${IS_COMPLETED_FRAGMENT}\n`;\n\nconst Wrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Items = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`;\n\nconst typeHierarchy = {\n  [TYPE_TODO_ID]: {\n    [TYPE_ISCOMPLETED_ID]: null,\n  },\n};\nconst unrestricted = false;\n\nfunction Project({ project, onItemDelete }) {\n  const parameters = {\n    currentProjectId: project.id\n  };\n\n  return (\n    <Wrapper>\n      <h3>{project.value}</h3>\n      <Source\n        id={SOURCE_TODOSOURCE_ID}\n        typeHierarchy={typeHierarchy}\n        query={TODO_QUERY}\n        unrestricted={unrestricted}\n        parameters={parameters}\n      >\n        {({ loading, error, data, updateSourceAfterCreateAction}) => {\n          if (loading) return 'Loading...';\n\n          if (error) return `Error: ${error.graphQLErrors}`;\n\n          const items = data.sourceData.map(el => ({\n            ...el.instance,\n            isCompleted: el.children[0].instance,\n          }));\n\n          return (\n            <>\n              <ItemForm projectId={project.id} onAdd={updateSourceAfterCreateAction} />\n              <Items>\n                {items.map(item => (\n                  <Item \n                    key={item.id}\n                    id={item.id}\n                    name={item.value}\n                    isCompleted={item.isCompleted}\n                  />\n                ))}\n              </Items>\n            </>\n          );\n        }}\n      </Source>\n    </Wrapper>\n  )\n}\n\nexport default Project;\n","import React from 'react';\nimport { Source } from 'no-stack';\nimport gql from 'graphql-tag';\n\nimport ProjectForm from '../ProjectForm';\nimport Project from '../Project';\n\nimport { SOURCE_PROJECTSOURCE_ID, TYPE_PROJECT_ID } from '../../config';\n\nconst SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeHierarchy: String!\n    $unrestricted: Boolean!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeHierarchy: $typeHierarchy\n      unrestricted: $unrestricted\n      parameters: $parameters\n    ) {\n      instance {\n        id\n        value\n      }\n    }\n  }\n`;\n\nconst typeHierarchy = {\n  [TYPE_PROJECT_ID]: null,\n};\n\nconst unrestricted = false;\nconst parameters = {};\n\nconst Projects = () => (\n  <Source\n    id={SOURCE_PROJECTSOURCE_ID}\n    typeHierarchy={typeHierarchy}\n    query={SOURCE_QUERY}\n    unrestricted={unrestricted}\n    parameters={parameters}\n  >\n    {({ loading, error, data, updateSourceAfterCreateAction }) => {\n      if (loading) return 'Loading...';\n\n      if (error) return `Error: ${error.graphQLErrors}`;\n\n      const projects = data.sourceData.map(el => el.instance);\n\n      return (\n        <>\n          <ProjectForm onAdd={updateSourceAfterCreateAction} />\n          {\n            projects && projects.map(project => (\n              <Project key={project.id} project={project} />\n            ))\n          }\n        </>\n      );\n    }}\n  </Source>\n);\n\nexport default Projects;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { NoStackConsumer, LoginForm } from 'no-stack';\n\nimport NavBar from './components/NavBar';\nimport Projects from './components/Projects';\n\nconst Wrapper = styled.div`\n  padding: 5em 5em;\n  min-width: 480px;\n`;\n\nconst LoginWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  div {\n    margin: 0.5em;\n  }\n`;\n\nconst App = () => (\n  <>\n    <NavBar />\n    <Wrapper className=\"App\">\n      <NoStackConsumer>\n        {({ loading, currentUser }) => {\n          if (loading) return null;\n\n          if (!currentUser) {\n            return (\n              <LoginWrapper>\n                <div>Please Log In</div>\n                <div><LoginForm /></div>\n              </LoginWrapper>\n            );\n          }\n\n          return (\n            <Projects />\n          );\n        }}\n      </NoStackConsumer>\n    </Wrapper>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { createAuthLink, httpLink } from 'no-stack';\n\nimport { PLATFORM_ID } from '../config';\n\nconst authLink = createAuthLink(PLATFORM_ID);\n\nconst link = ApolloLink.from([authLink, httpLink]);\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({\n    dataIdFromObject: object => object.id,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { NoStackProvider, Console } from 'no-stack';\n\nimport { PLATFORM_ID } from './config';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport client from './client';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <NoStackProvider client={client} platformId={PLATFORM_ID}>\n      <App />\n      <Console />\n    </NoStackProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}