{"version":3,"sources":["config/index.js","components/NavBar/index.js","components/CreateProjectForm/index.js","components/source-props/fragments.js","components/IsCompleted/index.js","components/Todo/index.js","components/CreateTodoForm/index.js","components/source-props/todo.js","components/Todos/index.js","components/Project/index.js","components/source-props/project.js","components/Projects/index.js","App.js","serviceWorker.js","client/index.js","index.js"],"names":["UPDATE_TODO_ACTION_ID","UPDATE_PROJECT_ACTION_ID","CREATE_TODO_FOR_PROJECT_ACTION_ID","UPDATE_ISCOMPLETED_ACTION_ID","CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID","CREATE_PROJECT_FOR_USER_ACTION_ID","SOURCE_TODOSOURCE_ID","Wrapper","styled","div","_templateObject","NavBar","react_default","a","createElement","no_stack","Form","CreateProjectForm_templateObject","Button","button","_templateObject2","compose","withNoStack","graphql","EXECUTE_ACTION","name","_ref","createProject","currentUser","onAdd","_useState","useState","_useState2","Object","slicedToArray","projectName","updateProjectName","handleSubmit","_x","_handleSubmit","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","preventDefault","abrupt","variables","actionId","executionParameters","JSON","stringify","parentInstanceId","id","value","unrestricted","update","stop","htmlFor","type","onChange","target","onKeyPress","charCode","onClick","PROJECT_FRAGMENT","gql","fragments_templateObject","TODO_FRAGMENT","fragments_templateObject2","IS_COMPLETED_FRAGMENT","_templateObject3","IsCompletedStyleWrapper","span","IsCompleted_templateObject","IsCompleted","isCompleted","label","_ref$disabled","disabled","checked","TodoStyleWrapper","Todo_templateObject","Todo_templateObject2","props","hoverColor","todo","updateInstance","onUpdate","todoValue","updateTodoValue","_useState3","_useState4","isEditMode","updateIsEditMode","_useState5","_useState6","isSaving","updateIsSaving","_handleTodoValueSave","instanceId","_handleUpdateCompletion","_callee2","_context2","optimisticResponse","ExecuteAction","Fragment","Todo_Button","components_IsCompleted","CreateTodoForm_templateObject","CreateTodoForm_templateObject2","projectId","createTodo","createIsCompleted","createTodoResponse","newTodoData","sent","parse","data","cache","response","isCompletedData","newTodo","instance","__typename","children","CreateTodoForm_Form","CreateTodoForm_Button","TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY","todo_templateObject","TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS","defineProperty","TodoListStyleWrapper","Todos_templateObject","Todos","parameters","currentProjectId","query","typeRelationships","_ref2","loading","error","updateSourceAfterCreateAction","updateSourceAfterUpdateAction","concat","graphQLErrors","todos","sourceData","map","el","objectSpread","components_CreateTodoForm","components_Todo","key","ProjectStyleWrapper","Project_templateObject","Row","Project_templateObject2","Project_templateObject3","project","projectValue","updateProjectValue","_handleProjectValueSave","Project_Button","components_Todos","PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY","project_templateObject","PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS","ProjectsStyleWrapper","Projects_templateObject","Projects","projects","CreateProjectForm","components_Project","App_templateObject","LoginWrapper","App_templateObject2","App","components_NavBar","App_Wrapper","className","components_Projects","Boolean","window","location","hostname","match","authLink","createAuthLink","link","ApolloLink","from","httpLink","client","ApolloClient","InMemoryCache","dataIdFromObject","object","ReactDOM","render","react_apollo_esm","platformId","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAOaA,EAAsB,uCACtBC,EAAyB,uCACzBC,EAAkC,uCAClCC,EAA6B,uCAC7BC,EAAsC,uCACtCC,EAAkC,uCAGlCC,EAAqB,mXCVlC,IAAMC,EAAUC,UAAOC,IAAVC,KAqBEC,EATA,kBACbC,EAAAC,EAAAC,cAACP,EAAD,KACEK,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,aAAD,sTCdN,IAAMC,EAAOR,UAAOC,IAAVQ,KAQJC,EAASV,UAAOW,OAAVC,KAqDGC,wBAAQC,cAAaC,kBAAQC,iBAAgB,CAAEC,KAAM,kBAArDJ,CAjDf,SAAAK,GAA4D,IAArCC,EAAqCD,EAArCC,cAAeC,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,MAASC,EACfC,mBAAS,IADMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClDK,EADkDH,EAAA,GACrCI,EADqCJ,EAAA,YAO3CK,EAP2CC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,WAAA,SAAAH,IAAA,OAAAA,EAAAN,OAAAU,EAAA,EAAAV,CAAAW,EAAA/B,EAAAgC,KAO1D,SAAAC,EAA4BC,GAA5B,OAAAH,EAAA/B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACEJ,EAAEK,iBAEGjB,EAHP,CAAAc,EAAAE,KAAA,eAAAF,EAAAI,OAAA,wBAAAJ,EAAAE,KAAA,EAOQxB,EAAc,CAClB2B,UAAW,CACTC,SAAUlD,EACVmD,oBAAqBC,KAAKC,UAAU,CAClCC,iBAAkB/B,EAAYgC,GAC9BC,MAAO1B,IAET2B,cAAc,GAEhBC,OAAQlC,MAhBZ,wBAAAoB,EAAAe,SAAAlB,OAP0DN,MAAAC,KAAAC,WAiC1D,OACE9B,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAAA,SAAOmD,QAAQ,gBAAf,gBAEErD,EAAAC,EAAAC,cAAA,SACE8C,GAAG,eACHM,KAAK,OACLC,SArCR,SAAsBpB,GACpBX,EAAkBW,EAAEqB,OAAOP,QAqCrBQ,WAdR,SAAwBtB,GACH,KAAfA,EAAEuB,UACJjC,EAAaU,IAaTc,MAAO1B,KAEXvB,EAAAC,EAAAC,cAACI,EAAD,CAAQgD,KAAK,SAASK,QAASlC,GAA/B,ybC7DC,IAAMmC,EAAmBC,IAAHC,KAOhBC,EAAgBF,IAAHG,KAObC,EAAwBJ,IAAHK,uLCblC,IAAMC,EAA0BvE,UAAOwE,KAAVC,KAwBdC,MAjBf,SAAAxD,GAAyE,IAAlDyD,EAAkDzD,EAAlDyD,YAAaC,EAAqC1D,EAArC0D,MAAOjB,EAA8BzC,EAA9ByC,SAA8BkB,EAAA3D,EAApB4D,gBAAoB,IAAAD,KACvE,OACEzE,EAAAC,EAAAC,cAACiE,EAAD,KACEnE,EAAAC,EAAAC,cAAA,SAAOmD,QAASkB,EAAYvB,IACzBwB,EACDxE,EAAAC,EAAAC,cAAA,SACE8C,GAAIuB,EAAYvB,GAChBM,KAAK,WACLqB,QAA+B,SAAtBJ,EAAYtB,MACrBM,SAAUA,EACVmB,SAAUA,kcCVpB,IAAME,EAAmBhF,UAAOC,IAAVgF,KAQhBvE,EAASV,UAAOW,OAAVuE,IAUC,SAAAC,GAAK,OAAIA,EAAMC,YAAc,YA2G3BrE,wBAAQC,iBAAgB,CAAEC,KAAM,kBAAhCF,CAvGf,SAAAG,GAA+D,IAA/CmE,EAA+CnE,EAA/CmE,KAAMV,EAAyCzD,EAAzCyD,YAAaW,EAA4BpE,EAA5BoE,eAAgBC,EAAYrE,EAAZqE,SAAYjE,EACtBC,mBAAS8D,EAAKhC,OADQ7B,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrDkE,EADqDhE,EAAA,GAC1CiE,EAD0CjE,EAAA,GAAAkE,EAEpBnE,oBAAS,GAFWoE,EAAAlE,OAAAC,EAAA,EAAAD,CAAAiE,EAAA,GAErDE,EAFqDD,EAAA,GAEzCE,EAFyCF,EAAA,GAAAG,EAGxBvE,oBAAS,GAHewE,EAAAtE,OAAAC,EAAA,EAAAD,CAAAqE,EAAA,GAGrDE,EAHqDD,EAAA,GAG3CE,EAH2CF,EAAA,YAAAG,IAAA,OAAAA,EAAAzE,OAAAU,EAAA,EAAAV,CAAAW,EAAA/B,EAAAgC,KAS7D,SAAAC,IAAA,OAAAF,EAAA/B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACEsD,GAAe,GADjBxD,EAAAE,KAAA,EAGQ2C,EAAe,CACnBxC,UAAW,CACTC,SAAUvD,EACVwD,oBAAqBC,KAAKC,UAAU,CAClCG,MAAOmC,EACPW,WAAYd,EAAKjC,KAEnBG,OAAQgC,EAASF,EAAKjC,GAAIe,MAVhC,OAcE0B,GAAiB,GACjBI,GAAe,GAfjB,wBAAAxD,EAAAe,SAAAlB,OAT6DN,MAAAC,KAAAC,WAAA,SAAAkE,IAAA,OAAAA,EAAA3E,OAAAU,EAAA,EAAAV,CAAAW,EAAA/B,EAAAgC,KA2B7D,SAAAgE,IAAA,IAAAhD,EAAA,OAAAjB,EAAA/B,EAAAmC,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cACQU,EAA8B,SAAtBsB,EAAYtB,MAAmB,QAAU,OADzDiD,EAAA3D,KAAA,EAGQ2C,EAAe,CACnBxC,UAAW,CACTC,SAAUpD,EACVqD,oBAAqBC,KAAKC,UAAU,CAClCG,QACA8C,WAAYxB,EAAYvB,KAE1BE,cAAc,GAEhBiD,mBAAoB,CAClBC,cAAevD,KAAKC,UAAU,CAC5BE,GAAIuB,EAAYvB,GAChBC,WAGJE,OAAQgC,EAASZ,EAAYvB,GAAIiB,KAlBrC,wBAAAiC,EAAA9C,SAAA6C,OA3B6DrE,MAAAC,KAAAC,WAiD7D,OACE9B,EAAAC,EAAAC,cAAC0E,EAAD,KACGY,EAEGxF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoG,SAAA,KACErG,EAAAC,EAAAC,cAAA,SAAOmD,QAAS4B,EAAKjC,IAArB,cAEEhD,EAAAC,EAAAC,cAAA,SACE8C,GAAIiC,EAAKjC,GACTM,KAAK,OACLL,MAAOmC,EACP7B,SAvDd,SAA+BpB,GAC7BkD,EAAgBlD,EAAEqB,OAAOP,QAuDbyB,SAAUkB,KAGd5F,EAAAC,EAAAC,cAACoG,EAAD,CACEhD,KAAK,SACL0B,WAAW,UACXrB,QAnEiD,kBAAAmC,EAAAlE,MAAAC,KAAAC,YAoEjD4C,SAAUkB,GAJZ,UAQA5F,EAAAC,EAAAC,cAACoG,EAAD,CACEhD,KAAK,SACL0B,WAAW,UACXrB,QAAS,kBAAM8B,GAAiB,IAChCf,SAAUkB,GAJZ,WAWF5F,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoG,SAAA,KACGjB,EACDpF,EAAAC,EAAAC,cAACoG,EAAD,CACEhD,KAAK,SACLK,QAAS,kBAAM8B,GAAiB,KAFlC,UAMAzF,EAAAC,EAAAC,cAACqG,EAAD,CACEhC,YAAaA,EACbC,MAAM,QACNjB,SA9FiD,kBAAAyC,EAAApE,MAAAC,KAAAC,8RCxB/D,IAAM1B,EAAOR,UAAOC,IAAV2G,KAQJlG,EAASV,UAAOW,OAAVkG,KAyFGhG,wBACbE,kBAAQC,iBAAgB,CAAEC,KAAM,eAChCF,kBAAQC,iBAAgB,CAAEC,KAAM,sBAFnBJ,CArFf,SAAAK,GAA6E,IAAnD4F,EAAmD5F,EAAnD4F,UAAWC,EAAwC7F,EAAxC6F,WAAYC,EAA4B9F,EAA5B8F,kBAAmB3F,EAASH,EAATG,MAASC,EACpCC,mBAAS,IAD2BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnEkE,EADmEhE,EAAA,GACxDiE,EADwDjE,EAAA,YAO5DK,EAP4DC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,WAAA,SAAAH,IAAA,OAAAA,EAAAN,OAAAU,EAAA,EAAAV,CAAAW,EAAA/B,EAAAgC,KAO3E,SAAAC,EAA4BC,GAA5B,IAAA0E,EAAAC,EAAA,OAAA9E,EAAA/B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACEJ,EAAEK,iBAEG4C,EAHP,CAAA/C,EAAAE,KAAA,eAAAF,EAAAI,OAAA,wBAAAJ,EAAAE,KAAA,EAOmCoE,EAAW,CAC1CjE,UAAW,CACTC,SAAUrD,EACVsD,oBAAqBC,KAAKC,UAAU,CAClCC,iBAAkB2D,EAClBzD,MAAOmC,IAETlC,cAAc,KAdpB,cAOQ2D,EAPRxE,EAAA0E,KAkBQD,EAAcjE,KAAKmE,MAAMH,EAAmBI,KAAKb,eAlBzD/D,EAAAE,KAAA,EAoBQqE,EAAkB,CACtBlE,UAAW,CACTC,SAAUnD,EACVoD,oBAAqBC,KAAKC,UAAU,CAClCC,iBAAkB+D,EAAYf,WAC9B9C,MAAO,UAETC,cAAc,GAEhBC,OAAQ,SAAC+D,EAAOC,GACd,IAAMC,EAAkBvE,KAAKmE,MAAMG,EAASF,KAAKb,eAE3CiB,EAAU,CACdC,SAAU,CACRtE,GAAI8D,EAAYf,WAChB9C,MAAO6D,EAAY7D,MACnBsE,WAAY,YAEdC,SAAU,CACR,CACEF,SAAU,CACRtE,GAAIoE,EAAgBrB,WACpB9C,MAAOmE,EAAgBnE,MACvBsE,WAAY,YAEdA,WAAY,yBAGhBA,WAAY,wBAGdtG,EAAMoG,EAANpG,CAAeiG,MAnDrB,wBAAA7E,EAAAe,SAAAlB,OAP2EN,MAAAC,KAAAC,WAqE3E,OACE9B,EAAAC,EAAAC,cAACuH,EAAD,KACEzH,EAAAC,EAAAC,cAAA,SAAOmD,QAAQ,aAAf,cAEErD,EAAAC,EAAAC,cAAA,SACE8C,GAAG,YACHM,KAAK,OACLC,SAzER,SAAsBpB,GACpBkD,EAAgBlD,EAAEqB,OAAOP,QAyEnBQ,WAdR,SAAwBtB,GACH,KAAfA,EAAEuB,UACJjC,EAAaU,IAaTc,MAAOmC,KAEXpF,EAAAC,EAAAC,cAACwH,EAAD,CAAQpE,KAAK,SAASK,QAASlC,GAA/B,+dC/FC,IAAMkG,GAAyC9D,IAAH+D,IAsB/C7D,EACAE,GAGS4D,GAAuCxG,OAAAyG,EAAA,EAAAzG,CAAA,GPT1B,2HOS0BA,OAAAyG,EAAA,EAAAzG,CAAA,GPXnB,kIOaN,wJCvB3B,IAAM0G,GAAuBnI,UAAOC,IAAVmI,MAmDXC,OA7Cf,SAAAnH,GAA8B,IAAb4F,EAAa5F,EAAb4F,UACTwB,EAAa,CACjBC,iBAAkBzB,GAGpB,OACE1G,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACE6C,GAAItD,EACJ0I,MAAOT,GACPU,kBAAmBR,GACnBK,WAAYA,GAEX,SAAAI,GAA0F,IAAxFC,EAAwFD,EAAxFC,QAASC,EAA+EF,EAA/EE,MAAOvB,EAAwEqB,EAAxErB,KAAMwB,EAAkEH,EAAlEG,8BAA+BC,EAAmCJ,EAAnCI,8BACtD,GAAIH,EAAS,MAAO,aAEpB,GAAIC,EAAO,gBAAAG,OAAiBH,EAAMI,eAElC,IAAMC,EAAQ5B,EAAK6B,WAAWC,IAAI,SAAAC,GAAE,OAAA3H,OAAA4H,EAAA,EAAA5H,CAAA,GAC/B2H,EAAG1B,SAD4B,CAElC/C,YAAayE,EAAGxB,SAAS,GAAGF,aAG9B,OACEtH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoG,SAAA,KACErG,EAAAC,EAAAC,cAACgJ,EAAD,CAAgBxC,UAAWA,EAAWzF,MAAOwH,IAC7CzI,EAAAC,EAAAC,cAAC6H,GAAD,KAEIc,GAASA,EAAME,IAAI,SAAA9D,GAAI,OACrBjF,EAAAC,EAAAC,cAACiJ,EAAD,CACEC,IAAKnE,EAAKjC,GACViC,KAAMA,EACNV,YAAaU,EAAKV,YAClBY,SAAUuD,qiBCtC9B,IAAMW,GAAsBzJ,UAAOC,IAAVyJ,MAQnBC,GAAM3J,UAAOC,IAAV2J,MAIHlJ,GAASV,UAAOW,OAAVkJ,KAUC,SAAA1E,GAAK,OAAIA,EAAMC,YAAc,YAiF3BrE,yBAAQC,iBAAgB,CAAEC,KAAM,kBAAhCF,CA7Ef,SAAAG,GAAwD,IAArC4I,EAAqC5I,EAArC4I,QAASxE,EAA4BpE,EAA5BoE,eAAgBC,EAAYrE,EAAZqE,SAAYjE,EACTC,mBAASuI,EAAQzG,OADR7B,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9CyI,EAD8CvI,EAAA,GAChCwI,EADgCxI,EAAA,GAAAkE,EAEbnE,oBAAS,GAFIoE,EAAAlE,OAAAC,EAAA,EAAAD,CAAAiE,EAAA,GAE9CE,EAF8CD,EAAA,GAElCE,EAFkCF,EAAA,GAAAG,EAGjBvE,oBAAS,GAHQwE,EAAAtE,OAAAC,EAAA,EAAAD,CAAAqE,EAAA,GAG9CE,EAH8CD,EAAA,GAGpCE,EAHoCF,EAAA,YAAAkE,IAAA,OAAAA,EAAAxI,OAAAU,EAAA,EAAAV,CAAAW,EAAA/B,EAAAgC,KAStD,SAAAC,IAAA,OAAAF,EAAA/B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACEsD,GAAe,GADjBxD,EAAAE,KAAA,EAGQ2C,EAAe,CACnBxC,UAAW,CACTC,SAAUtD,EACVuD,oBAAqBC,KAAKC,UAAU,CAClCG,MAAO0G,EACP5D,WAAY2D,EAAQ1G,MAGxBG,OAAQgC,EAASuE,EAAQ1G,GAAIY,KAXjC,OAcE6B,GAAiB,GACjBI,GAAe,GAfjB,wBAAAxD,EAAAe,SAAAlB,OATsDN,MAAAC,KAAAC,WA2BtD,OACE9B,EAAAC,EAAAC,cAACmJ,GAAD,KACG7D,EAEGxF,EAAAC,EAAAC,cAACqJ,GAAD,KACEvJ,EAAAC,EAAAC,cAAA,SAAOmD,QAASqG,EAAQ1G,IAAxB,iBAEEhD,EAAAC,EAAAC,cAAA,SACE8C,GAAI0G,EAAQ1G,GACZM,KAAK,OACLL,MAAO0G,EACPpG,SAjCd,SAAkCpB,GAChCyH,EAAmBzH,EAAEqB,OAAOP,QAiChByB,SAAUkB,KAGd5F,EAAAC,EAAAC,cAAC4J,GAAD,CACExG,KAAK,SACL0B,WAAW,UACXrB,QA7C0C,kBAAAkG,EAAAjI,MAAAC,KAAAC,YA8C1C4C,SAAUkB,GAJZ,UAQA5F,EAAAC,EAAAC,cAAC4J,GAAD,CACExG,KAAK,SACL0B,WAAW,UACXrB,QAAS,kBAAM8B,GAAiB,IAChCf,SAAUkB,GAJZ,WAWF5F,EAAAC,EAAAC,cAAA,UACGwJ,EAAQzG,MACTjD,EAAAC,EAAAC,cAAC4J,GAAD,CACExG,KAAK,SACLK,QAAS,kBAAM8B,GAAiB,KAFlC,WASNzF,EAAAC,EAAAC,cAAC6J,GAAD,CAAOrD,UAAWgD,EAAQ1G,qXCvGzB,IAAMgH,GAAyCnG,IAAHoG,KAiB/CrG,GAGSsG,GAAuC7I,OAAAyG,EAAA,EAAAzG,CAAA,GVNvB,oIUOR,8JChBrB,IAAM8I,GAAuBvK,UAAOC,IAAVuK,MAUpBlC,GAAa,GAkCJmC,GAhCE,kBACfrK,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACE6C,GXRiC,mFWSjCqF,kBAAmB6B,GACnB9B,MAAO4B,GACP9B,WAAYA,IAEX,SAAApH,GAA4F,IAAzFyH,EAAyFzH,EAAzFyH,QAASC,EAAgF1H,EAAhF0H,MAAOvB,EAAyEnG,EAAzEmG,KAAMwB,EAAmE3H,EAAnE2H,8BAA+BC,EAAoC5H,EAApC4H,8BACvD,GAAIH,EAAS,MAAO,aAEpB,GAAIC,EAAO,gBAAAG,OAAiBH,EAAMI,eAElC,IAAM0B,EAAWrD,EAAK6B,WAAWC,IAAI,SAAAC,GAAE,OAAIA,EAAG1B,WAE9C,OACEtH,EAAAC,EAAAC,cAACiK,GAAD,KACEnK,EAAAC,EAAAC,cAACqK,EAAD,CAAmBtJ,MAAOwH,IAExB6B,GAAYA,EAASvB,IAAI,SAAAW,GAAO,OAC9B1J,EAAAC,EAAAC,cAACsK,GAAD,CACEpB,IAAKM,EAAQ1G,GACb0G,QAASA,EACTvE,SAAUuD,+SCpC1B,IAAM/I,GAAUC,UAAOC,IAAV4K,MAKPC,GAAe9K,UAAOC,IAAV8K,MAoCHC,GA1BH,kBACV5K,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoG,SAAA,KACErG,EAAAC,EAAAC,cAAC2K,EAAD,MACA7K,EAAAC,EAAAC,cAAC4K,GAAD,CAASC,UAAU,OACjB/K,EAAAC,EAAAC,cAACC,EAAA,gBAAD,KACG,SAAAW,GAA8B,IAA3ByH,EAA2BzH,EAA3ByH,QAASvH,EAAkBF,EAAlBE,YACX,OAAIuH,EAAgB,KAEfvH,EAUHhB,EAAAC,EAAAC,cAAC8K,GAAD,MAREhL,EAAAC,EAAAC,cAACwK,GAAD,KACE1K,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,UAAD,aCvBD8K,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2FCVAC,GAAWC,yBdJU,uBcMrBC,GAAOC,KAAWC,KAAK,CAACJ,GAAUK,aAEzBC,GAAA,IAAIC,KAAa,CAC9BL,QACAtE,MAAO,IAAI4E,KAAc,CACvBC,iBAAkB,SAAAC,GAAM,OAAIA,EAAOhJ,QCHvCiJ,IAASC,OACPlM,EAAAC,EAAAC,cAACiM,EAAA,eAAD,CAAgBP,OAAQA,IACtB5L,EAAAC,EAAAC,cAACC,EAAA,gBAAD,CAAiByL,OAAQA,GAAQQ,WfVV,uBeWrBpM,EAAAC,EAAAC,cAACmM,GAAD,MACArM,EAAAC,EAAAC,cAACC,EAAA,QAAD,QAGJmM,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13d1754e.chunk.js","sourcesContent":["// This file was generated automatically by nostack.  If you build a new stack from a template, you should replace it.\n// If you modify your current stack to add actions, sources, or types, it would make sense to add constants here.\n\n// platform id\nexport const PLATFORM_ID = 'us-west-2_a3XGYPPYI';\n\n// action ids\nexport const UPDATE_TODO_ACTION_ID='7fe40fc7-c50f-49f5-917c-289d92f2e93f';\nexport const UPDATE_PROJECT_ACTION_ID='cfc49edd-e9aa-4dbc-88f6-5601279e537c';\nexport const CREATE_TODO_FOR_PROJECT_ACTION_ID='2e22b9ed-94a5-4759-bd55-543b6b01763b';\nexport const UPDATE_ISCOMPLETED_ACTION_ID='b1fdafd1-38c0-4b75-844b-86dae8ade91d';\nexport const CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID='7501f223-b88c-404b-96bc-6e02592df114';\nexport const CREATE_PROJECT_FOR_USER_ACTION_ID='9bbf029e-fd5b-427c-b2b2-869b8d9c794c';\n\n// source ids\nexport const SOURCE_TODOSOURCE_ID='collection_platform_TestStack154_collection_user_Collection_source_toDoSource';\nexport const SOURCE_PROJECTSOURCE_ID='collection_platform_TestStack154_collection_user_Collection_source_projectSource';\n\n// type ids\nexport const TYPE_PROJECT_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_projectSource_tree_projectSource_Tree_type_project';\nexport const TYPE_ISCOMPLETED_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_isCompleted';\nexport const TYPE_USER_ID='platform_TestStack154_userClass_user';\nexport const TYPE_TODO_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_toDo';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { LogoutButton } from 'no-stack';\n\nconst Wrapper = styled.div`\n  left: 0;\n  top: 0;\n  padding: 1em 3em;\n  font-size: 1rem;\n  color: #fffff0;\n  background-color: #00000f;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst NavBar = () => (\n  <Wrapper>\n    <div>stackbox todo</div>\n    <div>\n      <LogoutButton />\n    </div>\n  </Wrapper>\n);\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport styled from 'styled-components';\nimport { withNoStack, EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_PROJECT_FOR_USER_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ProjectForm({ createProject, currentUser, onAdd }) {\n  const [ projectName, updateProjectName ] = useState('');\n\n  function handleChange(e) {\n    updateProjectName(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!projectName) {\n      return;\n    }\n\n    await createProject({\n      variables: {\n        actionId: CREATE_PROJECT_FOR_USER_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: currentUser.id,\n          value: projectName,\n        }),\n        unrestricted: false,\n      },\n      update: onAdd(),\n    });\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor=\"project-name\">\n        Project Name:\n        <input\n          id=\"project-name\"\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={projectName} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>Create Project</Button>\n    </Form>\n  );\n}\n\nexport default compose(withNoStack, graphql(EXECUTE_ACTION, { name: 'createProject' }))(ProjectForm);\n","import gql from 'graphql-tag';\n\nexport const PROJECT_FRAGMENT = gql`\n  fragment ProjectParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const TODO_FRAGMENT = gql`\n  fragment TodoParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const IS_COMPLETED_FRAGMENT = gql`\n  fragment IsCompletedParts on Instance {\n    id\n    value\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst IsCompletedStyleWrapper = styled.span`\n  margin-left: 1.5em;\n  display: inline-block;\n  border: 1px solid #eeeeee;\n  padding: 0.5em;\n`;\n\nfunction IsCompleted({ isCompleted, label, onChange, disabled = false }) {\n  return (\n    <IsCompletedStyleWrapper>\n      <label htmlFor={isCompleted.id}>\n        {label}\n        <input\n          id={isCompleted.id} \n          type=\"checkbox\" \n          checked={isCompleted.value === 'true'} \n          onChange={onChange} \n          disabled={disabled}\n        />\n      </label>\n    </IsCompletedStyleWrapper>\n  );\n}\n\nexport default IsCompleted;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from 'react-apollo';\n\nimport { UPDATE_TODO_ACTION_ID, UPDATE_ISCOMPLETED_ACTION_ID } from '../../config';\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from '../source-props/fragments';\n\nimport IsCompleted from '../IsCompleted';\n\nconst TodoStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n\n  &:hover {\n    color: ${props => props.hoverColor || '#000000'};\n  }\n`;\n\nfunction Todo({ todo, isCompleted, updateInstance, onUpdate }) {\n  const [ todoValue, updateTodoValue ] = useState(todo.value);\n  const [ isEditMode, updateIsEditMode ] = useState(false);\n  const [ isSaving, updateIsSaving ] = useState(false);\n\n  function handleTodoValueChange(e) {\n    updateTodoValue(e.target.value);\n  }\n\n  async function handleTodoValueSave() {\n    updateIsSaving(true);\n    \n    await updateInstance({\n      variables: {\n        actionId: UPDATE_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: todoValue,\n          instanceId: todo.id,\n        }),\n        update: onUpdate(todo.id, TODO_FRAGMENT),\n      },\n    });\n\n    updateIsEditMode(false);\n    updateIsSaving(false);\n  }\n\n  async function handleUpdateCompletion() {\n    const value = isCompleted.value === 'true' ? 'false' : 'true';\n\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_ISCOMPLETED_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value,\n          instanceId: isCompleted.id,\n        }),\n        unrestricted: false,\n      },\n      optimisticResponse: {\n        ExecuteAction: JSON.stringify({\n          id: isCompleted.id,\n          value,\n        }),\n      },\n      update: onUpdate(isCompleted.id, IS_COMPLETED_FRAGMENT),\n    });\n  }\n\n  return (\n    <TodoStyleWrapper>\n      {isEditMode ?\n        (\n          <>\n            <label htmlFor={todo.id}>\n              Todo Value:\n              <input\n                id={todo.id}\n                type=\"text\"\n                value={todoValue}\n                onChange={handleTodoValueChange}\n                disabled={isSaving}\n              />\n            </label>\n            <Button\n              type=\"button\"\n              hoverColor=\"#00FF00\"\n              onClick={handleTodoValueSave}\n              disabled={isSaving}\n            >\n              &#10003;\n            </Button>\n            <Button\n              type=\"button\"\n              hoverColor=\"#FF0000\"\n              onClick={() => updateIsEditMode(false)}\n              disabled={isSaving}\n            >\n              &#10005;\n            </Button>\n          </>\n        ) :\n        (\n          <>\n            {todoValue}\n            <Button\n              type=\"button\"\n              onClick={() => updateIsEditMode(true)}\n            >\n              &#9998;\n            </Button>\n            <IsCompleted\n              isCompleted={isCompleted}\n              label=\"Done?\" \n              onChange={handleUpdateCompletion}\n            />\n          </>\n        )\n      }\n    </TodoStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Todo);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { graphql, compose } from 'react-apollo';\n\nimport { EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_TODO_FOR_PROJECT_ACTION_ID, CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction CreateTodoForm({ projectId, createTodo, createIsCompleted, onAdd }) {\n  const [ todoValue, updateTodoValue ] = useState('');\n\n  function handleChange(e) {\n    updateTodoValue(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!todoValue) {\n      return;\n    }\n\n    const createTodoResponse = await createTodo({\n      variables: {\n        actionId: CREATE_TODO_FOR_PROJECT_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: projectId,\n          value: todoValue,\n        }),\n        unrestricted: false,\n      },\n    });\n\n    const newTodoData = JSON.parse(createTodoResponse.data.ExecuteAction);\n\n    await createIsCompleted({\n      variables: {\n        actionId: CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: newTodoData.instanceId,\n          value: 'false',\n        }),\n        unrestricted: false,\n      },\n      update: (cache, response) => {\n        const isCompletedData = JSON.parse(response.data.ExecuteAction);\n\n        const newTodo = {\n          instance: {\n            id: newTodoData.instanceId,\n            value: newTodoData.value,\n            __typename: 'Instance',\n          },\n          children: [\n            {\n              instance: {\n                id: isCompletedData.instanceId,\n                value: isCompletedData.value,\n                __typename: 'Instance',\n              },\n              __typename: 'InstanceWithChildren',\n            },\n          ],\n          __typename: 'InstanceWithChildren',\n        };\n\n        onAdd(newTodo)(cache);\n      },\n    });\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor='todo-name'>\n        Todo Value:\n        <input\n          id='todo-name'\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={todoValue} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>Add Todo</Button>\n    </Form>\n  );\n}\n\nexport default compose(\n  graphql(EXECUTE_ACTION, { name: 'createTodo' }),\n  graphql(EXECUTE_ACTION, { name: 'createIsCompleted' }),\n)(CreateTodoForm);\n","import gql from 'graphql-tag';\nimport { TYPE_TODO_ID, TYPE_ISCOMPLETED_ID } from '../../config';\n\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from './fragments';\n\nexport const TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        ...TodoParts\n      }\n      children {\n        instance {\n          ...IsCompletedParts\n        }\n      }\n    }\n  }\n\n  ${TODO_FRAGMENT}\n  ${IS_COMPLETED_FRAGMENT}\n`;\n\nexport const TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS = {\n  [TYPE_TODO_ID]: {\n    [TYPE_ISCOMPLETED_ID]: null,\n  },\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Source } from 'no-stack';\n\nimport Todo from '../Todo';\nimport CreateTodoForm from '../CreateTodoForm';\n\nimport {SOURCE_TODOSOURCE_ID} from \"../../config\";\nimport {TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS, TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY} from \"../source-props/todo\";\n\nconst TodoListStyleWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`;\n\nfunction Todos({ projectId }) {\n  const parameters = {\n    currentProjectId: projectId,\n  };\n\n  return (\n    <Source\n      id={SOURCE_TODOSOURCE_ID}\n      query={TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY}\n      typeRelationships={TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS}\n      parameters={parameters}\n    >\n      {({loading, error, data, updateSourceAfterCreateAction, updateSourceAfterUpdateAction}) => {\n        if (loading) return 'Loading...';\n\n        if (error) return `Error: ${error.graphQLErrors}`;\n\n        const todos = data.sourceData.map(el => ({\n          ...el.instance,\n          isCompleted: el.children[0].instance,\n        }));\n\n        return (\n          <>\n            <CreateTodoForm projectId={projectId} onAdd={updateSourceAfterCreateAction} />\n            <TodoListStyleWrapper>\n              {\n                todos && todos.map(todo => (\n                  <Todo\n                    key={todo.id}\n                    todo={todo}\n                    isCompleted={todo.isCompleted}\n                    onUpdate={updateSourceAfterUpdateAction}\n                  />\n                ))\n              }\n            </TodoListStyleWrapper>\n          </>\n        );\n      }}\n    </Source>\n  );\n}\n\n\nexport default Todos;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from 'react-apollo';\n\nimport { UPDATE_PROJECT_ACTION_ID } from '../../config';\nimport { PROJECT_FRAGMENT } from '../source-props/fragments';\n\nimport Todos from '../Todos';\n\nconst ProjectStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Row = styled.div`\n  margin: 1em 0;\n`;\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n\n  &:hover {\n    color: ${props => props.hoverColor || '#000000'};\n  }\n`;\n\nfunction Project({ project, updateInstance, onUpdate }) {\n  const [ projectValue, updateProjectValue ] = useState(project.value);\n  const [ isEditMode, updateIsEditMode ] = useState(false);\n  const [ isSaving, updateIsSaving ] = useState(false);\n\n  function handleProjectValueChange(e) {\n    updateProjectValue(e.target.value);\n  }\n\n  async function handleProjectValueSave() {\n    updateIsSaving(true);\n    \n    await updateInstance({\n      variables: {\n        actionId: UPDATE_PROJECT_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: projectValue,\n          instanceId: project.id,\n        }),\n      },\n      update: onUpdate(project.id, PROJECT_FRAGMENT),\n    });\n\n    updateIsEditMode(false);\n    updateIsSaving(false);\n  }\n\n  return (\n    <ProjectStyleWrapper>\n      {isEditMode ?\n        (\n          <Row>\n            <label htmlFor={project.id}>\n              Project Value:\n              <input\n                id={project.id}\n                type=\"text\"\n                value={projectValue}\n                onChange={handleProjectValueChange}\n                disabled={isSaving}\n              />\n            </label>\n            <Button\n              type=\"button\"\n              hoverColor=\"#00FF00\"\n              onClick={handleProjectValueSave}\n              disabled={isSaving}\n            >\n              &#10003;\n            </Button>\n            <Button\n              type=\"button\"\n              hoverColor=\"#FF0000\"\n              onClick={() => updateIsEditMode(false)}\n              disabled={isSaving}\n            >\n              &#10005;\n            </Button>\n          </Row>\n        ) : \n        (\n          <h3>\n            {project.value}\n            <Button\n              type=\"button\"\n              onClick={() => updateIsEditMode(true)}\n            >\n              &#9998;\n            </Button>\n          </h3>\n        )\n      }\n      <Todos projectId={project.id} />\n    </ProjectStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Project);\n","import gql from 'graphql-tag';\nimport { TYPE_PROJECT_ID } from '../../config';\n\nimport { PROJECT_FRAGMENT } from './fragments';\n\nexport const PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        ...ProjectParts\n      }\n    }\n  }\n\n  ${PROJECT_FRAGMENT}\n`;\n\nexport const PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS = {\n  [TYPE_PROJECT_ID]: null,\n};\n\n","import React from 'react';\nimport { Source } from 'no-stack';\nimport styled from 'styled-components';\n\nimport CreateProjectForm from '../CreateProjectForm';\nimport Project from '../Project';\n\nimport { SOURCE_PROJECTSOURCE_ID } from '../../config';\nimport { PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS, PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY } from '../source-props/project';\n\nconst ProjectsStyleWrapper = styled.div`\n  input {\n    margin: 0 0.5em;\n  }\n\n  button {\n    margin: 0 0.5em;\n  }\n`;\n\nconst parameters = {};\n\nconst Projects = () => (\n  <Source\n    id={SOURCE_PROJECTSOURCE_ID}\n    typeRelationships={PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS}\n    query={PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY}\n    parameters={parameters}\n  >\n    {({ loading, error, data, updateSourceAfterCreateAction, updateSourceAfterUpdateAction }) => {\n      if (loading) return 'Loading...';\n\n      if (error) return `Error: ${error.graphQLErrors}`;\n\n      const projects = data.sourceData.map(el => el.instance);\n\n      return (\n        <ProjectsStyleWrapper>\n          <CreateProjectForm onAdd={updateSourceAfterCreateAction} />\n          {\n            projects && projects.map(project => (\n              <Project \n                key={project.id} \n                project={project}\n                onUpdate={updateSourceAfterUpdateAction}\n              />\n            ))\n          }\n        </ProjectsStyleWrapper>\n      );\n    }}\n  </Source>\n);\n\nexport default Projects;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { NoStackConsumer, LoginForm } from 'no-stack';\n\nimport NavBar from './components/NavBar';\nimport Projects from './components/Projects';\n\nconst Wrapper = styled.div`\n  padding: 5em 5em;\n  min-width: 480px;\n`;\n\nconst LoginWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  div {\n    margin: 0.5em;\n  }\n`;\n\nconst App = () => (\n  <>\n    <NavBar />\n    <Wrapper className=\"App\">\n      <NoStackConsumer>\n        {({ loading, currentUser }) => {\n          if (loading) return null;\n\n          if (!currentUser) {\n            return (\n              <LoginWrapper>\n                <div>Please Log In</div>\n                <div><LoginForm /></div>\n              </LoginWrapper>\n            );\n          }\n\n          return (\n            <Projects />\n          );\n        }}\n      </NoStackConsumer>\n    </Wrapper>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { createAuthLink, httpLink } from 'no-stack';\n\nimport { PLATFORM_ID } from '../config';\n\nconst authLink = createAuthLink(PLATFORM_ID);\n\nconst link = ApolloLink.from([authLink, httpLink]);\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({\n    dataIdFromObject: object => object.id,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { NoStackProvider, Console } from 'no-stack';\n\nimport { PLATFORM_ID } from './config';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport client from './client';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <NoStackProvider client={client} platformId={PLATFORM_ID}>\n      <App />\n      <Console />\n    </NoStackProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}