{"version":3,"sources":["config/index.js","components/NavBar/index.js","components/CreateProjectForm/index.js","components/source-props/fragments.js","components/IsCompleted/index.js","components/Todo/index.js","components/CreateTodoForm/index.js","components/source-props/todo.js","components/Todos/index.js","components/Project/index.js","components/source-props/project.js","components/Projects/index.js","App.js","serviceWorker.js","client/index.js","index.js"],"names":["UPDATE_TODO_ACTION_ID","UPDATE_PROJECT_ACTION_ID","CREATE_TODO_FOR_PROJECT_ACTION_ID","UPDATE_ISCOMPLETED_ACTION_ID","CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID","CREATE_PROJECT_FOR_USER_ACTION_ID","SOURCE_TODOSOURCE_ID","Wrapper","styled","div","_templateObject","NavBar","react_default","a","createElement","no_stack_esm","Form","CreateProjectForm_templateObject","Button","button","_templateObject2","compose","withNoStack","graphql","EXECUTE_ACTION","name","_ref","createProject","currentUser","onAdd","_useState","useState","_useState2","Object","slicedToArray","projectValue","updateProjectValue","_useState3","_useState4","loading","updateLoading","handleSubmit","_x","_handleSubmit","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","preventDefault","abrupt","variables","actionId","executionParameters","JSON","stringify","parentInstanceId","id","value","unrestricted","update","stop","htmlFor","type","onChange","target","onKeyPress","charCode","disabled","onClick","PROJECT_FRAGMENT","gql","fragments_templateObject","TODO_FRAGMENT","fragments_templateObject2","IS_COMPLETED_FRAGMENT","_templateObject3","IsCompletedStyleWrapper","span","IsCompleted_templateObject","IsCompleted","isCompleted","label","_ref$disabled","checked","TodoStyleWrapper","Todo_templateObject","Todo_templateObject2","props","hoverColor","todo","updateInstance","onUpdate","todoValue","updateTodoValue","isEditMode","updateIsEditMode","_useState5","_useState6","isSaving","updateIsSaving","_handleTodoValueSave","instanceId","_handleUpdateCompletion","_callee2","_context2","optimisticResponse","ExecuteAction","Fragment","Todo_Button","components_IsCompleted","CreateTodoForm_templateObject","CreateTodoForm_templateObject2","projectId","createTodo","createIsCompleted","createTodoResponse","newTodoData","sent","parse","data","cache","response","isCompletedData","newTodo","instance","__typename","children","CreateTodoForm_Form","CreateTodoForm_Button","TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY","todo_templateObject","TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS","defineProperty","TodoListStyleWrapper","Todos_templateObject","Todos","parameters","currentProjectId","query","typeRelationships","_ref2","error","updateSourceAfterCreateAction","updateSourceAfterUpdateAction","concat","graphQLErrors","todos","sourceData","map","el","objectSpread","components_CreateTodoForm","components_Todo","key","ProjectStyleWrapper","Project_templateObject","Row","Project_templateObject2","Project_templateObject3","project","_handleProjectValueSave","Project_Button","components_Todos","PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY","project_templateObject","PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS","ProjectsStyleWrapper","Projects_templateObject","Projects","projects","CreateProjectForm","components_Project","App_templateObject","LoginWrapper","App_templateObject2","App","components_NavBar","App_Wrapper","className","components_Projects","Boolean","window","location","hostname","match","authLink","createAuthLink","link","ApolloLink","from","httpLink","client","ApolloClient","InMemoryCache","dataIdFromObject","object","ReactDOM","render","react_apollo_esm","platformId","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88b311e7.chunk.js","sourcesContent":["// This file was generated automatically by nostack.  If you build a new stack from a template, you should replace it.\n// If you modify your current stack to add actions, sources, or types, it would make sense to add constants here.\n\n// platform id\nexport const PLATFORM_ID = 'us-west-2_a3XGYPPYI';\n\n// action ids\nexport const UPDATE_TODO_ACTION_ID='7fe40fc7-c50f-49f5-917c-289d92f2e93f';\nexport const UPDATE_PROJECT_ACTION_ID='cfc49edd-e9aa-4dbc-88f6-5601279e537c';\nexport const CREATE_TODO_FOR_PROJECT_ACTION_ID='2e22b9ed-94a5-4759-bd55-543b6b01763b';\nexport const UPDATE_ISCOMPLETED_ACTION_ID='b1fdafd1-38c0-4b75-844b-86dae8ade91d';\nexport const CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID='7501f223-b88c-404b-96bc-6e02592df114';\nexport const CREATE_PROJECT_FOR_USER_ACTION_ID='9bbf029e-fd5b-427c-b2b2-869b8d9c794c';\n\n// source ids\nexport const SOURCE_TODOSOURCE_ID='collection_platform_TestStack154_collection_user_Collection_source_toDoSource';\nexport const SOURCE_PROJECTSOURCE_ID='collection_platform_TestStack154_collection_user_Collection_source_projectSource';\n\n// type ids\nexport const TYPE_PROJECT_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_projectSource_tree_projectSource_Tree_type_project';\nexport const TYPE_ISCOMPLETED_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_isCompleted';\nexport const TYPE_USER_ID='platform_TestStack154_userClass_user';\nexport const TYPE_TODO_ID='tree_source_collection_platform_TestStack154_collection_user_Collection_source_toDoSource_tree_toDoSource_Tree_type_toDo';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { LogoutButton } from 'no-stack';\n\nconst Wrapper = styled.div`\n  left: 0;\n  top: 0;\n  padding: 1em 3em;\n  font-size: 1rem;\n  color: #fffff0;\n  background-color: #00000f;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst NavBar = () => (\n  <Wrapper>\n    <div>stackbox todo</div>\n    <div>\n      <LogoutButton />\n    </div>\n  </Wrapper>\n);\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport styled from 'styled-components';\nimport { withNoStack, EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_PROJECT_FOR_USER_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ProjectForm({ createProject, currentUser, onAdd }) {\n  const [ projectValue, updateProjectValue ] = useState('');\n  const [ loading, updateLoading ] = useState(false);\n\n  function handleChange(e) {\n    updateProjectValue(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!projectValue) {\n      return;\n    }\n\n    updateLoading(true);\n\n    await createProject({\n      variables: {\n        actionId: CREATE_PROJECT_FOR_USER_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: currentUser.id,\n          value: projectValue,\n        }),\n        unrestricted: false,\n      },\n      update: onAdd(),\n    });\n\n    updateProjectValue('');\n    updateLoading(false);\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor=\"project-name\">\n        Project Name:\n        <input\n          id=\"project-name\"\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={projectValue}\n          disabled={loading}\n        />\n      </label>\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\n        {\n          loading \n            ? 'Creating Project...'\n            : 'Create Project'\n        }\n      </Button>\n    </Form>\n  );\n}\n\nexport default compose(withNoStack, graphql(EXECUTE_ACTION, { name: 'createProject' }))(ProjectForm);\n","import gql from 'graphql-tag';\n\nexport const PROJECT_FRAGMENT = gql`\n  fragment ProjectParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const TODO_FRAGMENT = gql`\n  fragment TodoParts on Instance {\n    id\n    value\n  }\n`;\n\nexport const IS_COMPLETED_FRAGMENT = gql`\n  fragment IsCompletedParts on Instance {\n    id\n    value\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst IsCompletedStyleWrapper = styled.span`\n  margin-left: 1.5em;\n  display: inline-block;\n  border: 1px solid #eeeeee;\n  padding: 0.5em;\n`;\n\nfunction IsCompleted({ isCompleted, label, onChange, disabled = false }) {\n  return (\n    <IsCompletedStyleWrapper>\n      <label htmlFor={isCompleted.id}>\n        {label}\n        <input\n          id={isCompleted.id} \n          type=\"checkbox\" \n          checked={isCompleted.value === 'true'} \n          onChange={onChange} \n          disabled={disabled}\n        />\n      </label>\n    </IsCompletedStyleWrapper>\n  );\n}\n\nexport default IsCompleted;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from 'react-apollo';\n\nimport { UPDATE_TODO_ACTION_ID, UPDATE_ISCOMPLETED_ACTION_ID } from '../../config';\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from '../source-props/fragments';\n\nimport IsCompleted from '../IsCompleted';\n\nconst TodoStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n\n  &:hover {\n    color: ${props => props.hoverColor || '#000000'};\n  }\n`;\n\nfunction Todo({ todo, isCompleted, updateInstance, onUpdate }) {\n  const [ todoValue, updateTodoValue ] = useState(todo.value);\n  const [ isEditMode, updateIsEditMode ] = useState(false);\n  const [ isSaving, updateIsSaving ] = useState(false);\n\n  function handleTodoValueChange(e) {\n    updateTodoValue(e.target.value);\n  }\n\n  async function handleTodoValueSave() {\n    updateIsSaving(true);\n    \n    await updateInstance({\n      variables: {\n        actionId: UPDATE_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: todoValue,\n          instanceId: todo.id,\n        }),\n        update: onUpdate(todo.id, TODO_FRAGMENT),\n      },\n    });\n\n    updateIsEditMode(false);\n    updateIsSaving(false);\n  }\n\n  async function handleUpdateCompletion() {\n    const value = isCompleted.value === 'true' ? 'false' : 'true';\n\n    await updateInstance({\n      variables: {\n        actionId: UPDATE_ISCOMPLETED_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value,\n          instanceId: isCompleted.id,\n        }),\n        unrestricted: false,\n      },\n      optimisticResponse: {\n        ExecuteAction: JSON.stringify({\n          id: isCompleted.id,\n          value,\n        }),\n      },\n      update: onUpdate(isCompleted.id, IS_COMPLETED_FRAGMENT),\n    });\n  }\n\n  return (\n    <TodoStyleWrapper>\n      {isEditMode ?\n        (\n          <>\n            <label htmlFor={todo.id}>\n              Todo Value:\n              <input\n                id={todo.id}\n                type=\"text\"\n                value={todoValue}\n                onChange={handleTodoValueChange}\n                disabled={isSaving}\n              />\n            </label>\n            <Button\n              type=\"button\"\n              hoverColor=\"#00FF00\"\n              onClick={handleTodoValueSave}\n              disabled={isSaving}\n            >\n              &#10003;\n            </Button>\n            <Button\n              type=\"button\"\n              hoverColor=\"#FF0000\"\n              onClick={() => updateIsEditMode(false)}\n              disabled={isSaving}\n            >\n              &#10005;\n            </Button>\n          </>\n        ) :\n        (\n          <>\n            {todoValue}\n            <Button\n              type=\"button\"\n              onClick={() => updateIsEditMode(true)}\n            >\n              &#9998;\n            </Button>\n            <IsCompleted\n              isCompleted={isCompleted}\n              label=\"Done?\" \n              onChange={handleUpdateCompletion}\n            />\n          </>\n        )\n      }\n    </TodoStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Todo);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { graphql, compose } from 'react-apollo';\n\nimport { EXECUTE_ACTION } from 'no-stack';\n\nimport { CREATE_TODO_FOR_PROJECT_ACTION_ID, CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID } from '../../config';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction CreateTodoForm({ projectId, createTodo, createIsCompleted, onAdd }) {\n  const [ todoValue, updateTodoValue ] = useState('');\n  const [ loading, updateLoading ] = useState(false);\n\n  function handleChange(e) {\n    updateTodoValue(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!todoValue) {\n      return;\n    }\n\n    updateLoading(true);\n\n    const createTodoResponse = await createTodo({\n      variables: {\n        actionId: CREATE_TODO_FOR_PROJECT_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: projectId,\n          value: todoValue,\n        }),\n        unrestricted: false,\n      },\n    });\n\n    const newTodoData = JSON.parse(createTodoResponse.data.ExecuteAction);\n\n    await createIsCompleted({\n      variables: {\n        actionId: CREATE_ISCOMPLETED_FOR_TODO_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: newTodoData.instanceId,\n          value: 'false',\n        }),\n        unrestricted: false,\n      },\n      update: (cache, response) => {\n        const isCompletedData = JSON.parse(response.data.ExecuteAction);\n\n        const newTodo = {\n          instance: {\n            id: newTodoData.instanceId,\n            value: newTodoData.value,\n            __typename: 'Instance',\n          },\n          children: [\n            {\n              instance: {\n                id: isCompletedData.instanceId,\n                value: isCompletedData.value,\n                __typename: 'Instance',\n              },\n              __typename: 'InstanceWithChildren',\n            },\n          ],\n          __typename: 'InstanceWithChildren',\n        };\n\n        onAdd(newTodo)(cache);\n      },\n    });\n\n    updateTodoValue('');\n    updateLoading(false);\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);\n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor='todo-name'>\n        Todo Value:\n        <input\n          id='todo-name'\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={todoValue}\n          disabled={loading}\n        />\n      </label>\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\n        {\n          loading\n            ? 'Adding Todo...'\n            : 'Add Todo'\n        }\n      </Button>\n    </Form>\n  );\n}\n\nexport default compose(\n  graphql(EXECUTE_ACTION, { name: 'createTodo' }),\n  graphql(EXECUTE_ACTION, { name: 'createIsCompleted' }),\n)(CreateTodoForm);\n","import gql from 'graphql-tag';\nimport { TYPE_TODO_ID, TYPE_ISCOMPLETED_ID } from '../../config';\n\nimport { TODO_FRAGMENT, IS_COMPLETED_FRAGMENT } from './fragments';\n\nexport const TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        ...TodoParts\n      }\n      children {\n        instance {\n          ...IsCompletedParts\n        }\n      }\n    }\n  }\n\n  ${TODO_FRAGMENT}\n  ${IS_COMPLETED_FRAGMENT}\n`;\n\nexport const TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS = {\n  [TYPE_TODO_ID]: {\n    [TYPE_ISCOMPLETED_ID]: null,\n  },\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Source } from 'no-stack';\n\nimport Todo from '../Todo';\nimport CreateTodoForm from '../CreateTodoForm';\n\nimport {SOURCE_TODOSOURCE_ID} from \"../../config\";\nimport {TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS, TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY} from \"../source-props/todo\";\n\nconst TodoListStyleWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`;\n\nfunction Todos({ projectId }) {\n  const parameters = {\n    currentProjectId: projectId,\n  };\n\n  return (\n    <Source\n      id={SOURCE_TODOSOURCE_ID}\n      query={TODOS_FOR_CURRENT_PROJECT_SOURCE_QUERY}\n      typeRelationships={TODOS_FOR_CURRENT_PROJECT_RELATIONSHIPS}\n      parameters={parameters}\n    >\n      {({loading, error, data, updateSourceAfterCreateAction, updateSourceAfterUpdateAction}) => {\n        if (loading) return 'Loading...';\n\n        if (error) return `Error: ${error.graphQLErrors}`;\n\n        const todos = data.sourceData.map(el => ({\n          ...el.instance,\n          isCompleted: el.children[0].instance,\n        }));\n\n        return (\n          <>\n            <CreateTodoForm projectId={projectId} onAdd={updateSourceAfterCreateAction} />\n            <TodoListStyleWrapper>\n              {\n                todos && todos.map(todo => (\n                  <Todo\n                    key={todo.id}\n                    todo={todo}\n                    isCompleted={todo.isCompleted}\n                    onUpdate={updateSourceAfterUpdateAction}\n                  />\n                ))\n              }\n            </TodoListStyleWrapper>\n          </>\n        );\n      }}\n    </Source>\n  );\n}\n\n\nexport default Todos;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { EXECUTE_ACTION } from 'no-stack';\nimport { graphql } from 'react-apollo';\n\nimport { UPDATE_PROJECT_ACTION_ID } from '../../config';\nimport { PROJECT_FRAGMENT } from '../source-props/fragments';\n\nimport Todos from '../Todos';\n\nconst ProjectStyleWrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst Row = styled.div`\n  margin: 1em 0;\n`;\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n\n  &:hover {\n    color: ${props => props.hoverColor || '#000000'};\n  }\n`;\n\nfunction Project({ project, updateInstance, onUpdate }) {\n  const [ projectValue, updateProjectValue ] = useState(project.value);\n  const [ isEditMode, updateIsEditMode ] = useState(false);\n  const [ isSaving, updateIsSaving ] = useState(false);\n\n  function handleProjectValueChange(e) {\n    updateProjectValue(e.target.value);\n  }\n\n  async function handleProjectValueSave() {\n    updateIsSaving(true);\n    \n    await updateInstance({\n      variables: {\n        actionId: UPDATE_PROJECT_ACTION_ID,\n        executionParameters: JSON.stringify({\n          value: projectValue,\n          instanceId: project.id,\n        }),\n      },\n      update: onUpdate(project.id, PROJECT_FRAGMENT),\n    });\n\n    updateIsEditMode(false);\n    updateIsSaving(false);\n  }\n\n  return (\n    <ProjectStyleWrapper>\n      {isEditMode ?\n        (\n          <Row>\n            <label htmlFor={project.id}>\n              Project Value:\n              <input\n                id={project.id}\n                type=\"text\"\n                value={projectValue}\n                onChange={handleProjectValueChange}\n                disabled={isSaving}\n              />\n            </label>\n            <Button\n              type=\"button\"\n              hoverColor=\"#00FF00\"\n              onClick={handleProjectValueSave}\n              disabled={isSaving}\n            >\n              &#10003;\n            </Button>\n            <Button\n              type=\"button\"\n              hoverColor=\"#FF0000\"\n              onClick={() => updateIsEditMode(false)}\n              disabled={isSaving}\n            >\n              &#10005;\n            </Button>\n          </Row>\n        ) : \n        (\n          <h3>\n            {project.value}\n            <Button\n              type=\"button\"\n              onClick={() => updateIsEditMode(true)}\n            >\n              &#9998;\n            </Button>\n          </h3>\n        )\n      }\n      <Todos projectId={project.id} />\n    </ProjectStyleWrapper>\n  );\n}\n\nexport default graphql(EXECUTE_ACTION, { name: 'updateInstance' })(Project);\n","import gql from 'graphql-tag';\nimport { TYPE_PROJECT_ID } from '../../config';\n\nimport { PROJECT_FRAGMENT } from './fragments';\n\nexport const PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY = gql`\n  query SOURCE(\n    $id: ID!\n    $typeRelationships: String!\n    $parameters: String\n  ) {\n    sourceData(\n      sourceId: $id\n      typeRelationships: $typeRelationships\n      parameters: $parameters\n    ) {\n      instance {\n        ...ProjectParts\n      }\n    }\n  }\n\n  ${PROJECT_FRAGMENT}\n`;\n\nexport const PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS = {\n  [TYPE_PROJECT_ID]: null,\n};\n\n","import React from 'react';\nimport { Source } from 'no-stack';\nimport styled from 'styled-components';\n\nimport CreateProjectForm from '../CreateProjectForm';\nimport Project from '../Project';\n\nimport { SOURCE_PROJECTSOURCE_ID } from '../../config';\nimport { PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS, PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY } from '../source-props/project';\n\nconst ProjectsStyleWrapper = styled.div`\n  input {\n    margin: 0 0.5em;\n  }\n\n  button {\n    margin: 0 0.5em;\n  }\n`;\n\nconst parameters = {};\n\nconst Projects = () => (\n  <Source\n    id={SOURCE_PROJECTSOURCE_ID}\n    typeRelationships={PROJECTS_FOR_CURRENT_USER_RELATIONSHIPS}\n    query={PROJECTS_FOR_CURRENT_USER_SOURCE_QUERY}\n    parameters={parameters}\n  >\n    {({ loading, error, data, updateSourceAfterCreateAction, updateSourceAfterUpdateAction }) => {\n      if (loading) return 'Loading...';\n\n      if (error) return `Error: ${error.graphQLErrors}`;\n\n      const projects = data.sourceData.map(el => el.instance);\n\n      return (\n        <ProjectsStyleWrapper>\n          <CreateProjectForm onAdd={updateSourceAfterCreateAction} />\n          {\n            projects && projects.map(project => (\n              <Project \n                key={project.id} \n                project={project}\n                onUpdate={updateSourceAfterUpdateAction}\n              />\n            ))\n          }\n        </ProjectsStyleWrapper>\n      );\n    }}\n  </Source>\n);\n\nexport default Projects;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { NoStackConsumer, LoginForm } from 'no-stack';\n\nimport NavBar from './components/NavBar';\nimport Projects from './components/Projects';\n\nconst Wrapper = styled.div`\n  padding: 5em 5em;\n  min-width: 480px;\n`;\n\nconst LoginWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  div {\n    margin: 0.5em;\n  }\n`;\n\nconst App = () => (\n  <>\n    <NavBar />\n    <Wrapper className=\"App\">\n      <NoStackConsumer>\n        {({ loading, currentUser }) => {\n          if (loading) return null;\n\n          if (!currentUser) {\n            return (\n              <LoginWrapper>\n                <div>Please Log In</div>\n                <div><LoginForm /></div>\n              </LoginWrapper>\n            );\n          }\n\n          return (\n            <Projects />\n          );\n        }}\n      </NoStackConsumer>\n    </Wrapper>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { createAuthLink, httpLink } from 'no-stack';\n\nimport { PLATFORM_ID } from '../config';\n\nconst authLink = createAuthLink(PLATFORM_ID);\n\nconst link = ApolloLink.from([authLink, httpLink]);\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({\n    dataIdFromObject: object => object.id,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { NoStackProvider, Console } from 'no-stack';\n\nimport { PLATFORM_ID } from './config';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport client from './client';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <NoStackProvider client={client} platformId={PLATFORM_ID}>\n      <App />\n      <Console />\n    </NoStackProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}